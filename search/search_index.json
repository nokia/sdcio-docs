{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>The paradigm of schema-driven API approaches is gaining increasing popularity as it facilitates programmatic interaction with systems by both machines and humans. While OpenAPI schema stands out as a widely embraced system, there are other notable schema approaches like YANG, among others. This project endeavors to empower users with a declarative and idempotent method for seamless interaction with API systems, providing a robust foundation for effective system configuration.\"</p>"},{"location":"#architecture","title":"Architecture","text":"<p>The project consists of 4 components:</p> <p></p>"},{"location":"#schema-server","title":"Schema-server","text":"<p>The schema server component is a versatile repository for schemas from diverse vendors and versions. It features a GRPC API for seamless schema querying and dynamic management, allowing users to load and unload schemas in real time. The integration of a CLI enhances user interaction, providing a familiar command-line interface. Operating in a stateless architecture, it offers scalability, while optional schema persistence caters to users requiring persistent storage. In essence, the schema server combines flexibility, efficiency, and user-friendliness for effective schema management in dynamic API environments.</p>"},{"location":"#data-server","title":"Data-server","text":"<p>The data-server component serves as a versatile intermediary, connecting the config-server, schema-server, cache, and xNF/Device in a stateless design for scalability. It features a North-bound API for both imperative and declarative interactions and supports various South-bound protocols. With dedicated DataStores per target, flexible synchronization options, candidate-based interactions, and the ability to connect multiple data servers per device, it provides a resilient and adaptable foundation for managing and synchronizing data in dynamic system environments.</p>"},{"location":"#cache","title":"Cache","text":"<p>The cache component manages multiple datastores, including Config, State, and Intended, along with Intent metadata. It offers the option for persistent data storage, complemented by a GRPC API for seamless interaction. Additionally, the cache component provides a derived Command Line Interface (CLI) for user-friendly access and configuration.</p>"},{"location":"#config-server","title":"Config-server","text":"<p>The config-server is a Kubernetes-based Operator and comprises of several controllers:</p> <ul> <li>Schema Controller: Manages the lifecycle of schemas using Schema Custom Resources (CR).</li> <li>Discovery Controller: Manages the lifecycle of targets through DiscoveryRule CR, discovering devices/NF(s)</li> <li>Target Controller: Manages the lifecycle of Target DataStores using Target CR.</li> <li>Config API Server: Manages the lifecycle of Config resources.<ul> <li>Utilizes its storage backend (not etcd).</li> <li>Interacts declaratively with the data-server through Intent transactions.</li> <li>Implements validation checks, rejecting configurations that fail validation.</li> </ul> </li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Schema's: YANG, others TBD</li> <li>Targets: Physical devices (<code>PNF</code>), Containers (<code>CNF</code>), Virtual Machines (<code>VNF</code>) and <code>NOOP</code> (No Operation)</li> <li>Vendor agnostic</li> <li>Flexible deployments: Small, medium or large scale scaled out deployments</li> <li>Target Protocols: gNMI, Netconf</li> <li>Full Config or Config Snippets</li> <li>Declarative Operation</li> </ul>"},{"location":"#join-us","title":"Join us","text":"<p>Have questions, ideas, bug reports or just want to chat? Come join our discord server.</p>"},{"location":"community/community/","title":"Community","text":"<p>Find out everything about the SDCIO community.</p>"},{"location":"community/community/#discord","title":"Discord","text":"<p>Everybody is welcome to join and chat with our community members about all things SDCIO!  Join SDCIO Discord Server </p>"},{"location":"dev/dev/","title":"Development","text":""},{"location":"dev/dev/#environment","title":"Environment","text":"<p>The following provides details on how to run any of the SDC components locally on the developers machine, allowing to use e.g. the debugging mode.</p>"},{"location":"dev/dev/#setup","title":"Setup","text":"<p>Telepresence is used to \"highjack\" the tcp connection endpoints and redirect it to the development machine. Hence install Telepresence on the development machine.</p>"},{"location":"dev/dev/#install-telepresence-on-dev-machine","title":"Install Telepresence on Dev machine","text":"<pre><code>sudo curl -fL https://app.getambassador.io/download/tel2oss/releases/download/v2.18.0/telepresence-linux-amd64 -o /usr/local/bin/telepresence\n\nsudo chmod a+x /usr/local/bin/telepresence\nsudo bash -c \"/usr/local/bin/telepresence completion bash &gt; /etc/bash_completion.d/telepresence\"\n</code></pre>"},{"location":"dev/dev/#install-telepresence-in-k8s-cluster","title":"Install Telepresence in K8s cluster","text":"<pre><code>telepresence helm install\n</code></pre>"},{"location":"dev/dev/#connect","title":"Connect","text":"<p>Connect to the telepresence service in the cluster, using the namespace network-system. <pre><code>telepresence connect -n network-system\n</code></pre></p>"},{"location":"dev/dev/#intercept-service-traffic","title":"Intercept Service Traffic","text":""},{"location":"dev/dev/#config-server","title":"Config Server","text":"<pre><code>telepresence intercept config-server --port 6443:api-service\n</code></pre> mounts <p>telepresence allows for the mounts of the config-server pod to be forwarded via sshfs to the dev machine.</p> <p>It might be necessary to set the <code>user_allow_other</code> in the fuse config file <code>/etc/fuse.conf</code>.</p>"},{"location":"dev/dev/#retrieve-config-server-api-service-certificate","title":"Retrieve Config-Server Api-Service Certificate","text":"<pre><code>kubectl get secrets -n network-system config-server-cert -o jsonpath=\"{.data['tls\\.crt']}\" | base64 -d | tee tls.crt\nkubectl get secrets -n network-system config-server-cert -o jsonpath=\"{.data['tls\\.key']}\" | base64 -d | tee tls.key\n</code></pre>"},{"location":"dev/dev/#prepare-kubeconfig","title":"Prepare kubeconfig","text":"<pre><code># copy actual ~/.kube/config\ncp ~/.kube/config ./kubeconfig\n\n# delete the users section via yq\nyq -i 'del(.users)' kubeconfig\n</code></pre>"},{"location":"dev/dev/#retrieve-serviceaccount-token","title":"Retrieve ServiceAccount Token","text":"<p>Retrieve a 30 day valid ServiceAccount token and put it into the kubeconfig. <pre><code>kubectl config --kubeconfig ./kubeconfig set-credentials kind-kind --token=$(kubectl create token -n network-system --duration 720h config-server)\n</code></pre></p>"},{"location":"dev/dev/#run-config-server-locally","title":"Run config-server locally","text":"<p>The VSCode configuration is as follows.  <pre><code>        {\n            \"name\": \"Launch Package\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"${workspaceFolder}/main.go\",\n            \"cwd\": \"${workspaceFolder}\",\n            \"args\": [\n                \"--tls-cert-file=./tls.crt\",\n                \"--tls-private-key-file=./tls.key\",\n                \"--feature-gates=APIPriorityAndFairness=false\",\n                \"--audit-log-path=-\",\n                \"--audit-log-maxage=0\",\n                \"--audit-log-maxbackup=0\",\n                \"--secure-port=6443\",\n                \"--kubeconfig=./kubeconfig\",\n                \"--authorization-kubeconfig=./kubeconfig\",\n                \"--authentication-kubeconfig=./kubeconfig\",\n            ],\n            \"env\": {\n                \"SDC_SCHEMA_SERVER_BASE_DIR\": \"/tmp/SDC/SchemaBase\",\n                \"SDC_CONFIG_DIR\": \"/tmp/SDC/Config\"\n            },\n            \"console\": \"integratedTerminal\",\n        }\n</code></pre></p>"},{"location":"examples/0_about/","title":"About lab examples","text":"<p>Note</p> <p>The lab examples that you find on this site are meant to explain the basics of using <code>sdc</code>. </p> <p>These lab examples are meant to be used as-is or as a base layer to a more customized or elaborated lab scenarios. </p>"},{"location":"examples/1_k8s_srl_collocated/","title":"K8s with gNMI devices (SR Linux)","text":""},{"location":"examples/1_k8s_srl_collocated/#pre-requisites","title":"Pre-requisites","text":"<p>Ensure the pre-requisites are met</p>"},{"location":"examples/1_k8s_srl_collocated/#install-containerlab","title":"Install containerlab","text":"<p>SDC will need to interact with a device that talks <code>YANG</code>. You can use physical, virtual or containers. In this example we use containerlab a tool to ease deploying labs with container images.</p>"},{"location":"examples/1_k8s_srl_collocated/#sdc-on-kubernetes","title":"SDC on kubernetes","text":"<p>Install the k8s-collocated environment using a kind cluster </p>"},{"location":"examples/1_k8s_srl_collocated/#devices","title":"Devices","text":"<p>Once the sdc components are up and running, you can proceed to deploy devices, configuring them using YANG schemas. To do this we deploy containerlab using a simple topology as shown below. </p> <p>Container connectivity</p> <p>Ensure the network and kind cluster containers can communicate. In this example this is accomplished by configuring containerlab to use the kind docker bridge for its management network <code>mgmt.network: kind</code>.</p> <pre><code>name: srl-lab\nmgmt:\nmtu: 1500\nnetwork: kind\ntopology:\nkinds:\nsrl:\ntype: ixrd3\nimage: ghcr.io/nokia/srlinux:23.10.1-218\nnodes:\ndev1:\nkind: srl\ndev2:\nkind: srl\nlinks:\n</code></pre> <p>Record the ip addresses containerlab provided to both containers. You will need them in the target discovery step.</p>"},{"location":"examples/1_k8s_srl_collocated/#schemas","title":"Schema's","text":"<p>Once the devices/targets are up and running you need to install the corresponding device schema's. In this example we use Nokia SRLinux version 23.10.1</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: srl.nokia.sdcio.dev-23.10.1\nnamespace: default\nspec:\nrepoURL: https://github.com/nokia/srlinux-yang-models\nprovider: srl.nokia.sdcio.dev\nversion: 23.10.1\nkind: tag\nref: v23.10.1\ndirs:\n- src: srlinux-yang-models\ndst: .\nschema:\nmodels:\n- srl_nokia/models\nincludes:\n- ietf\n- openconfig/extensions\n- openconfig/openconfig-extensions.yang\nexcludes:\n- .*tools.*\nEOF\n</code></pre> <p>you can valdate the schema loading using the following command.</p> <pre><code>kubectl get schema srl.nokia.sdcio.dev-23.10.1\n</code></pre> <p>If successfull you should see the <code>READY</code> state being <code>True</code></p> <pre><code>NAME                          READY   URL                                            REF        PROVIDER              VERSION\nsrl.nokia.sdcio.dev-23.10.1   True    https://github.com/nokia/srlinux-yang-models   v23.10.1   srl.nokia.sdcio.dev   23.10.1\n</code></pre>"},{"location":"examples/1_k8s_srl_collocated/#discovering-targets","title":"Discovering targets","text":"<p>To discover a device/target, you first need to deploy some profiles which informs the discovery controller how to authenticate to the target and which sync and connectivity profiles to use.</p> <ul> <li>Secret: used to authenticate the system.</li> </ul> <p>Ensure you update the username and password for your environment</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Secret\nmetadata:\nname: srl.nokia.sdcio.dev namespace: default\ntype: kubernetes.io/basic-auth\nstringData:\nusername: ######\npassword: ######\nEOF\n</code></pre> <ul> <li>TargetConnectionProfile: provides the connectivity information, which protocol and port to use towards the device</li> </ul> <p>In this example we use <code>gnmi</code> with port <code>57400</code> and skip-verify because we use self-signed certificates</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetConnectionProfile\nmetadata:\nname: gnmi-skipverify\nnamespace: default\nspec:\nport: 57400\nprotocol: gnmi\nencoding: ASCII\nskipVerify: true\ninsecure: false\nEOF\n</code></pre> <ul> <li>TargetSyncProfile: provides the sync information we use to sync the config from the device.</li> </ul> <p>In this example we use <code>gnmi</code> using an ON-CHANGE subscription.</p> <p><pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetSyncProfile\nmetadata:\nname: gnmi-onchange\nnamespace: default\nspec:\nbuffer: 0\nworkers: 10\nvalidate: true\nsync:\n- name: config\nprotocol: gnmi\npaths:\n- /\nmode: onChange\nencoding: config\ninterval: 0\nEOF\n</code></pre> Once profiles are up installed, you can now deploy a <code>DiscoveryRule</code>. In this example we use static ip discovery (or better no discovery). It means the <code>ip address/prefix</code>  containerlab returned should be used as the ip prefix in the following CRD.</p> <p>The default schema should match the schema you loaded in the schema section.</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dr-static\nnamespace: default\nspec:\nperiod: 1m\nconcurrentScans: 2\ndefaultSchema:\nprovider: srl.nokia.sdcio.dev  version: 23.10.1\naddresses:\n- address: 172.20.20.3\nhostName: dev1\n- address: 172.20.20.2\nhostName: dev2\ntargetConnectionProfiles:\n- credentials: srl.nokia.sdcio.dev connectionProfile: gnmi-skipverify\nsyncProfile: gnmi-onchange\ntargetTemplate:\nlabels:\nsdcio.dev/region: us-east\nEOF\n</code></pre> <p>The discovery of the target can be observed using the following comamnd</p> <pre><code>kubectl get targets.inv.sdcio.dev\n</code></pre> <p>When target are successfully discovered you should see both <code>READY</code> and <code>DATASTORE</code> set to <code>True</code>.</p> <pre><code>NAME   READY   DATASTORE   PROVIDER              ADDRESS             PLATFORM   SERIALNUMBER   MACADDRESS\ndev1   True    True        srl.nokia.sdcio.dev   172.20.20.3:57400\ndev2   True    True        srl.nokia.sdcio.dev   172.20.20.2:57400\n</code></pre>"},{"location":"examples/1_k8s_srl_collocated/#configure-intents","title":"Configure Intents","text":"<p>Now that targets are ready to be comsumed we can provision the targets with configuration data in a declarative way.</p> <p>The following parameters are important - metadata.name: name of the intent - metadata.labels: targetName and targetNamespace tell the config-server which device this configuration applies to - priority: defines the priority of the intent if overlapping intents apply to the target - Config has a:   - path: relative to the root   - value: the config you apply to the device in <code>yaml</code> format</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: config.sdcio.dev/v1alpha1\nkind: Config\nmetadata:\nname: intent1\nnamespace: default\nlabels:\ntargetName: dev1\ntargetNamespace: default\nspec:\npriority: 10\nconfig:\n- path: /\nvalue:\ninterface:\n- name: ethernet-1/1\nadmin-state: \"enable\"\ndescription: \"intent1\"\nvlan-tagging: true\nsubinterface:\n- index: 2\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 2\n- index: 3\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 3\n- index: 4\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 4\nEOF\n</code></pre>"},{"location":"examples/2_k8s_sros_collocated/","title":"K8s with NETCONF devices (SROS)","text":""},{"location":"examples/2_k8s_sros_collocated/#pre-requisites","title":"Pre-requisites","text":"<p>Ensure the pre-requisites are met</p>"},{"location":"examples/2_k8s_sros_collocated/#install-containerlab","title":"Install containerlab","text":"<p>SDC will need to interact with a device that talks <code>YANG</code>. You can use physical, virtual or containers. In this example we use containerlab a tool to ease deploying labs with container images.</p>"},{"location":"examples/2_k8s_sros_collocated/#sdc-on-kubernetes","title":"SDC on kubernetes","text":"<p>Install the k8s-collocated environment using a kind cluster </p>"},{"location":"examples/2_k8s_sros_collocated/#devices","title":"Devices","text":"<p>Once the sdc components are up and running, you can proceed to deploy devices, configuring them using YANG schemas. To do this we deploy containerlab using a simple topology as shown below. </p> <p>Container connectivity</p> <p>Ensure the network and kind cluster containers can communicate. In this example this is accomplished by configuring containerlab to use the kind docker bridge for its management network <code>mgmt.network: kind</code>.</p> <pre><code>name: sros-lab\nmgmt:\nmtu: 1500\nnetwork: kind\ntopology:\nkinds:\nvr-sros:\nimage: registry.srlinux.dev/pub/vr-sros:23.10.R1\nlicense: license-sros23.txt\nnodes:\ndev1:\nkind: vr-sros\nmgmt-ipv4: 172.20.20.11\nmgmt-ipv6: 2001:172:20:20::11\ndev2:\nkind: vr-sros\nmgmt-ipv4: 172.20.20.12\nmgmt-ipv6: 2001:172:20:20::12\n</code></pre> <p>Record the ip addresses containerlab provided to both containers. You will need them in the target discovery step.</p>"},{"location":"examples/2_k8s_sros_collocated/#schemas","title":"Schema's","text":"<p>Once the devices/targets are up and running you need to install the corresponding device schema's. In this example we use Nokia SRLinux version 23.10.1</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: sros.nokia.sdcio.dev-23.10.1\nnamespace: default\nspec:\nrepoURL: https://github.com/nokia/7x50_YangModels\nprovider: sros.nokia.sdcio.dev\nversion: 23.10.1\nkind: tag\nref: sros_23.10.r1\ndirs:\n- src: YANG\ndst: .\nschema:\nmodels:\n- nokia-combined\nincludes:\n- ietf\n- nokia-sros-yang-extensions.yang\nEOF\n</code></pre> <p>you can valdate the schema loading using the following command.</p> <pre><code>kubectl get schema sros.nokia.sdcio.dev-23.10.1\n</code></pre> <p>If successfull you should see the <code>READY</code> state being <code>True</code></p> <pre><code>NAME                          READY   URL                                            REF        PROVIDER              VERSION\nsros.nokia.sdcio.dev-23.10.1   True    https://github.com/nokia/7x50_YangModels   sros_23.10.r1   sros.nokia.sdcio.dev   23.10.1\n</code></pre>"},{"location":"examples/2_k8s_sros_collocated/#discovering-targets","title":"Discovering targets","text":"<p>To discover a device/target, you first need to deploy some profiles which informs the discovery controller how to authenticate to the target and which sync and connectivity profiles to use.</p> <ul> <li>Secret: used to authenticate the system.</li> </ul> <p>Ensure you update the username and password for your environment</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Secret\nmetadata:\nname: sros.nokia.sdcio.dev namespace: default\ntype: kubernetes.io/basic-auth\nstringData:\nusername: ######\npassword: ######\nEOF\n</code></pre> <ul> <li>TargetConnectionProfile: provides the connectivity information, which protocol and port to use towards the device</li> </ul> <p>In this example we use <code>netconf</code> with port <code>830</code> and skip-verify because we use self-signed certificates</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetConnectionProfile\nmetadata:\nname: netconf\nnamespace: default\nlabels:\ndummy: dummy\nspec:\nport: 830\nprotocol: netconf\nencoding: ASCII\nskipVerify: true\nincludeNS: true\noperationWithNS: true\nEOF\n</code></pre> <ul> <li>TargetSyncProfile: provides the sync information we use to sync the config from the device.</li> </ul> <p>In this example we use <code>netconf</code> using a PERIOD retrieval.</p> <p><pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetSyncProfile\nmetadata:\nname: netconf-getconfig\nnamespace: default\nspec:\nbuffer: 0\nworkers: 10\nvalidate: true\nsync:\n- name: config\nprotocol: netconf\npaths:\n- /\nmode: sample\nencoding: config\ninterval: 10\nEOF\n</code></pre> Once profiles are up installed, you can now deploy a <code>DiscoveryRule</code>. In this example we use static ip discovery (or better no discovery). It means the <code>ip address/prefix</code>  containerlab returned should be used as the ip prefix in the following CRD.</p> <p>The default schema should match the schema you loaded in the schema section.</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dr-static\nnamespace: default\nspec:\nperiod: 1m\nconcurrentScans: 2\ndefaultSchema:\nprovider: sros.nokia.sdcio.dev  version: 23.10.1\naddresses:\n- address: 172.20.20.11\nhostName: dev1\n- address: 172.20.20.12\nhostName: dev2\ntargetConnectionProfiles:\n- credentials: sros.nokia.sdcio.dev\nconnectionProfile: netconf\nsyncProfile: netconf-getconfig\ntargetTemplate:\nlabels:\nsdcio.dev/region: us-east\nEOF\n</code></pre> <p>The discovery of the target can be observed using the following comamnd</p> <pre><code>kubectl get targets.inv.sdcio.dev\n</code></pre> <p>When target are successfully discovered you should see both <code>READY</code> and <code>DATASTORE</code> set to <code>True</code>.</p> <pre><code>NAME   READY   DATASTORE   PROVIDER              ADDRESS             PLATFORM   SERIALNUMBER   MACADDRESS\ndev1   True    True        sros.nokia.sdcio.dev   172.20.20.11:57400\ndev2   True    True        sros.nokia.sdcio.dev   172.20.20.12:57400\n</code></pre>"},{"location":"examples/2_k8s_sros_collocated/#configure-intents","title":"Configure Intents","text":"<p>Now that targets are ready to be comsumed we can provision the targets with configuration data in a declarative way.</p> <p>The following parameters are important - metadata.name: name of the intent - metadata.labels: targetName and targetNamespace tell the config-server which device this configuration applies to - priority: defines the priority of the intent if overlapping intents apply to the target - Config has a:   - path: relative to the root   - value: the config you apply to the device in <code>yaml</code> format</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: config.sdcio.dev/v1alpha1\nkind: Config\nmetadata:\nname: intent1-sros\nnamespace: default\nlabels:\ntargetName: dev1\ntargetNamespace: default\nspec:\npriority: 10\nconfig:\n- path: /\nvalue:\nconfigure:\nservice:\nvprn:\nservice-name: \"vprn123\"\ncustomer: \"1\"\nservice-id: \"200\"\nadmin-state: \"enable\"\nEOF\n</code></pre>"},{"location":"getting-started/basic-usage/","title":"Basic Usage","text":"<p>The following examples demonstrate the basic usage of SDCIO in a scenario where a Nokia SR Linux node is being configured via SDCIO installed in a Kind based Kubernetes cluster.</p>"},{"location":"getting-started/basic-usage/#kind","title":"Kind","text":"<p>kind is a tool for running local Kubernetes clusters using Docker container \u201cnodes\u201d. kind was primarily designed for testing Kubernetes itself, but may be used for local development or CI.</p>"},{"location":"getting-started/basic-usage/#installation","title":"Installation","text":"<pre><code>[ $(uname -m) = x86_64 ] &amp;&amp; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.21.0/kind-$(uname)-amd64\nchmod +x ./kind\nsudo mv ./kind /usr/local/bin/kind\n</code></pre>"},{"location":"getting-started/basic-usage/#cluster-creation","title":"Cluster Creation","text":"<p>To create a Kind based Kubernetes Cluster, issue the following command. <pre><code>kind create cluster\n# Allow the kind cluster to communicate with the later created containerlab topology\nsudo iptables -I DOCKER-USER -o br-$(docker network inspect -f '{{ printf \"%.12s\" .ID }}' kind) -j ACCEPT\n</code></pre></p> iptables command description <pre><code>sudo iptables -I DOCKER-USER -o br-$(docker network inspect -f '{{ printf \"%.12s\" .ID }}' kind) -j ACCEPT\n</code></pre> <ul> <li><code>docker network inspect -f '{{ printf \"%.12s\" .ID }}' kind</code> - inspects the kind docker network, that the kind cluster is attached to. Extract from the json that is returned, the first 12 characters of the Id field.</li> <li><code>sudo iptables -I DOCKER-USER -o br-$(...) -j ACCEPT</code> - as root insert a firewall rule to the DOCKER-USER chain, concerning the bridge with the name \"br-\" with the action ACCEPT."},{"location":"getting-started/basic-usage/#kubectl","title":"kubectl","text":"<p><code>kubectl</code> is a command-line tool used to control and manage Kubernetes clusters. It allows developers and administrators to execute commands to create, monitor, and manage resources such as pods, services, deployments, and more within a Kubernetes cluster.</p>"},{"location":"getting-started/basic-usage/#installation_1","title":"Installation","text":"<p>To install <code>kubectl</code> issue the following command. <pre><code>curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\nchmod +x ./kubectl\nsudo mv ./kubectl /usr/local/bin/kubectl\n</code></pre></p>"},{"location":"getting-started/basic-usage/#containerlab","title":"Containerlab","text":"<p>Containerlab is a tool for creating virtual network topologies using container-based network emulation. It is particularly useful for testing and validating network configurations and automation workflows in a lab environment.</p>"},{"location":"getting-started/basic-usage/#installation_2","title":"Installation","text":"<p>To install Containerlab follow the instruction at https://containerlab.dev/install/ or simply run the following.</p> <pre><code>bash -c \"$(curl -sL https://get.containerlab.dev)\"\n</code></pre>"},{"location":"getting-started/basic-usage/#infrastructure","title":"Infrastructure","text":"<p>The following contains information on how to deploy a Nokia SR Linux NOS container, which will consecutively be managed via sdcio.</p>"},{"location":"getting-started/basic-usage/#installation_3","title":"Installation","text":"<p>Deploy a Nokia SR Linux device via Containerlab.</p> <pre><code>sudo containerlab deploy -t https://docs.sdcio.dev/artifacts/basic-usage/basic-usage.clab.yaml\n</code></pre> Topology Content <pre><code>name: basic-usage\nmgmt:\nnetwork: basic-usage\nipv4-subnet: 172.21.0.0/16\ntopology:\nkinds:\nnokia_srlinux:\ntype: ixrd3\nimage: ghcr.io/nokia/srlinux\nnodes:\nsrl:\nkind: nokia_srlinux\nmgmt-ipv4: 172.21.0.200\n</code></pre>"},{"location":"getting-started/basic-usage/#verification","title":"Verification","text":"<p>The output of the containerlab deploy from above should indicate, that the node <code>clab-basic-usage-srl</code> is in the running state.</p> <pre><code>+---+----------------------+--------------+-----------------------+---------------+---------+-----------------+--------------+\n| # |         Name         | Container ID |         Image         |     Kind      |  State  |  IPv4 Address   | IPv6 Address |\n+---+----------------------+--------------+-----------------------+---------------+---------+-----------------+--------------+\n| 1 | clab-basic-usage-srl | e84130ad8b49 | ghcr.io/nokia/srlinux | nokia_srlinux | running | 172.21.0.200/16 | N/A          |\n+---+----------------------+--------------+-----------------------+---------------+---------+-----------------+--------------+\n</code></pre>"},{"location":"getting-started/basic-usage/#cert-manager","title":"Cert-Manager","text":"<p>The config-server (extension api-server) requires a certificate, which is created via cert-manager. The corresponding CA cert needs to be injected into the cabundle spec field of the <code>api-service</code> resource.</p>"},{"location":"getting-started/basic-usage/#installation_4","title":"Installation","text":"<pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.3/cert-manager.yaml\n# If the SDCIO resources, see below are being applied to fast, the webhook of the cert-manager is not already there.\n# Hence we need to wait for the resource be become Available\nkubectl wait -n cert-manager --for=condition=Available=True --timeout=300s deployments.apps cert-manager-webhook\n</code></pre>"},{"location":"getting-started/basic-usage/#sdcio","title":"SDCIO","text":""},{"location":"getting-started/basic-usage/#installation_5","title":"Installation","text":"<p>To install SDCIO, copy the following snippet into a shell and execute it. <pre><code>kubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/colocated.yaml\n</code></pre></p> Artifact Content <pre><code>---\napiVersion: v1\nkind: Namespace\nmetadata:\nname: network-system\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.12.1\nname: schemas.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: Schema\nlistKind: SchemaList\nplural: schemas\nsingular: schema\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\n- jsonPath: .spec.repoURL\nname: URL\ntype: string\n- jsonPath: .spec.ref\nname: REF\ntype: string\n- jsonPath: .spec.provider\nname: PROVIDER\ntype: string\n- jsonPath: .spec.version\nname: VERSION\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: Schema is the Schema for the Schema API\nproperties:\napiVersion:\ndescription: 'APIVersion defines the versioned schema of this representation\nof an object. Servers should convert recognized schemas to the latest\ninternal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\ntype: string\nkind:\ndescription: 'Kind is a string value representing the REST resource this\nobject represents. Servers may infer this from the endpoint the client\nsubmits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: SchemaSpec defines the desired state of Schema\nproperties:\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the repo\ntype: string\nx-kubernetes-validations:\n- message: credentials is immutable\nrule: self == oldSelf\ndirs:\ndescription: Dirs defines the list of directories that identified\nthe provider schema in src/dst pairs relative within the repository\nitems:\ndescription: SrcDstPath provide a src/dst pair for the loader to\ndownload the schema from a specific src in the repository to a\ngiven destination in the schema server\nproperties:\ndst:\ndescription: Dst is the relative directory in the schema server\ntype: string\nsrc:\ndescription: Src is the relative directory in the repository\nURL\ntype: string\nrequired:\n- dst\n- src\ntype: object\nmaxItems: 10\ntype: array\nx-kubernetes-validations:\n- message: dirs is immutable\nrule: oldSelf.all(x, x in self)\nkind:\ndefault: tag\ndescription: Kind defines the that the BranchOrTag string is a repository\nbranch or a tag\nenum:\n- branch\n- tag\ntype: string\nprovider:\ndescription: Provider specifies the provider of the schema.\ntype: string\nx-kubernetes-validations:\n- message: provider is immutable\nrule: self == oldSelf\nref:\ndescription: Ref defines the branch or tag of the repository corresponding\nto the provider schema version\ntype: string\nx-kubernetes-validations:\n- message: ref is immutable\nrule: self == oldSelf\nrepoURL:\ndescription: URL specifies the base URL for a given repository\ntype: string\nx-kubernetes-validations:\n- message: url is immutable\nrule: self == oldSelf\nschema:\ndescription: Schema provides the details of which files must be used\nfor the models and which files/directories cana be excludes\nproperties:\nexcludes:\ndescription: Excludes defines the list of files/directories to\nbe excluded\nitems:\ntype: string\nmaxItems: 64\ntype: array\nx-kubernetes-validations:\n- message: excludes is immutable\nrule: oldSelf.all(x, x in self)\nincludes:\ndescription: Excludes defines the list of files/directories to\nbe excluded\nitems:\ntype: string\nmaxItems: 64\ntype: array\nx-kubernetes-validations:\n- message: includes is immutable\nrule: oldSelf.all(x, x in self)\nmodels:\ndescription: Models defines the list of files/directories to be\nused as a model\nitems:\ntype: string\nmaxItems: 64\ntype: array\nx-kubernetes-validations:\n- message: models is immutable\nrule: oldSelf.all(x, x in self)\ntype: object\nversion:\ndescription: Version defines the version of the schema\ntype: string\nx-kubernetes-validations:\n- message: version is immutable\nrule: self == oldSelf\nrequired:\n- kind\n- provider\n- ref\n- repoURL\n- schema\n- version\ntype: object\nstatus:\ndescription: SchemaStatus defines the observed state of Schema\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: lastTransitionTime is the last time the condition\ntransitioned from one status to another. This should be when\nthe underlying condition changed.  If that is not known, then\nusing the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: message is a human readable message indicating\ndetails about the transition. This may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: observedGeneration represents the .metadata.generation\nthat the condition was set based upon. For instance, if .metadata.generation\nis currently 12, but the .status.conditions[x].observedGeneration\nis 9, the condition is out of date with respect to the current\nstate of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: reason contains a programmatic identifier indicating\nthe reason for the condition's last transition. Producers\nof specific condition types may define expected values and\nmeanings for this field, and whether the values are considered\na guaranteed API. The value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: type of condition in CamelCase or in foo.example.com/CamelCase.\n--- Many .condition.type values are consistent across resources\nlike Available, but because arbitrary conditions can be useful\n(see .node.status.conditions), the ability to deconflict is\nimportant. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.12.1\nname: targetsyncprofiles.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: TargetSyncProfile\nlistKind: TargetSyncProfileList\nplural: targetsyncprofiles\nsingular: targetsyncprofile\nscope: Namespaced\nversions:\n- name: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: TargetSyncProfile is the Schema for the TargetSyncProfile API\nproperties:\napiVersion:\ndescription: 'APIVersion defines the versioned schema of this representation\nof an object. Servers should convert recognized schemas to the latest\ninternal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\ntype: string\nkind:\ndescription: 'Kind is a string value representing the REST resource this\nobject represents. Servers may infer this from the endpoint the client\nsubmits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: TargetSyncProfileSpec defines the desired state of TargetSyncProfile\nproperties:\nbuffer:\ndefault: 0\nformat: int64\ntype: integer\nx-kubernetes-validations:\n- message: buffer is immutable\nrule: self == oldSelf\nsync:\nitems:\ndescription: TargetSyncProfileSync defines the desired state of\nTargetSyncProfileSync\nproperties:\nencoding:\ndefault: ASCII\nenum:\n- unknown\n- JSON\n- JSON_IETF\n- bytes\n- protobuf\n- ASCII\n- config\ntype: string\ninterval:\ndefault: 60s\ntype: string\nmode:\nenum:\n- unknown\n- onChange\n- sample\n- once\n- get\ntype: string\nname:\ntype: string\npaths:\nitems:\ntype: string\nmaxItems: 10\ntype: array\nprotocol:\ndefault: gnmi\nenum:\n- unknown\n- gnmi\n- netconf\n- noop\ntype: string\nrequired:\n- mode\n- name\n- paths\n- protocol\ntype: object\nmaxItems: 10\ntype: array\nx-kubernetes-validations:\n- message: sync may only be added\nrule: oldSelf.all(x, x in self)\nvalidate:\ndefault: true\ntype: boolean\nx-kubernetes-validations:\n- message: validate is immutable\nrule: self == oldSelf\nworkers:\ndefault: 10\nformat: int64\ntype: integer\nx-kubernetes-validations:\n- message: workers is immutable\nrule: self == oldSelf\ntype: object\nx-kubernetes-validations:\n- message: sync is required once set\nrule: '!has(oldSelf.sync) || has(self.sync)'\ntype: object\nserved: true\nstorage: true\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.12.1\nname: targets.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: Target\nlistKind: TargetList\nplural: targets\nsingular: target\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\n- jsonPath: .status.conditions[?(@.type=='Ready')].message\nname: REASON\ntype: string\n- jsonPath: .spec.provider\nname: PROVIDER\ntype: string\n- jsonPath: .spec.address\nname: ADDRESS\ntype: string\n- jsonPath: .status.discoveryInfo.platform\nname: PLATFORM\ntype: string\n- jsonPath: .status.discoveryInfo.serialNumber\nname: SERIALNUMBER\ntype: string\n- jsonPath: .status.discoveryInfo.macAddress\nname: MACADDRESS\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: Target is the Schema for the Target API\nproperties:\napiVersion:\ndescription: 'APIVersion defines the versioned schema of this representation\nof an object. Servers should convert recognized schemas to the latest\ninternal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\ntype: string\nkind:\ndescription: 'Kind is a string value representing the REST resource this\nobject represents. Servers may infer this from the endpoint the client\nsubmits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: TargetSpec defines the desired state of Target\nproperties:\naddress:\ndescription: Address defines the address to connect to the target\ntype: string\nconnectionProfile:\ndescription: ConnectionProfile define the profile used to connect\nto the target once discovered\ntype: string\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the target\ntype: string\nprovider:\ndescription: Provider specifies the provider using this target.\ntype: string\nsyncProfile:\ndescription: SyncProfile define the profile used to sync to the target\nconfig once discovered\ntype: string\ntlsSecret:\ndescription: TLSSecret defines the name of the TLS secret to connect\nto the target if mtls is used\ntype: string\nrequired:\n- address\n- connectionProfile\n- credentials\n- provider\ntype: object\nstatus:\ndescription: TargetStatus defines the observed state of Target\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: lastTransitionTime is the last time the condition\ntransitioned from one status to another. This should be when\nthe underlying condition changed.  If that is not known, then\nusing the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: message is a human readable message indicating\ndetails about the transition. This may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: observedGeneration represents the .metadata.generation\nthat the condition was set based upon. For instance, if .metadata.generation\nis currently 12, but the .status.conditions[x].observedGeneration\nis 9, the condition is out of date with respect to the current\nstate of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: reason contains a programmatic identifier indicating\nthe reason for the condition's last transition. Producers\nof specific condition types may define expected values and\nmeanings for this field, and whether the values are considered\na guaranteed API. The value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: type of condition in CamelCase or in foo.example.com/CamelCase.\n--- Many .condition.type values are consistent across resources\nlike Available, but because arbitrary conditions can be useful\n(see .node.status.conditions), the ability to deconflict is\nimportant. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\ndiscoveryInfo:\ndescription: Discovery info defines the information retrieved during\ndiscovery\nproperties:\nhostname:\ndescription: HostName associated with the target\ntype: string\nlastSeen:\ndescription: Last discovery time\nformat: date-time\ntype: string\nmacAddress:\ndescription: MacAddress associated with the target\ntype: string\nplatform:\ndescription: Platform associated with the target\ntype: string\nprotocol:\ndescription: Protocol used for discovery\ntype: string\nprovider:\ndescription: Type associated with the target\ntype: string\nserialNumber:\ndescription: SerialNumber associated with the target\ntype: string\nsupportedEncodings:\ndescription: Supported Encodings of the target\nitems:\ntype: string\ntype: array\nversion:\ndescription: Version associated with the target\ntype: string\ntype: object\nusedReferences:\ndescription: UsedReferences track the resource used to reconcile the\ncr\nproperties:\nconnectionProfileResourceVersion:\ntype: string\nsecretResourceVersion:\ntype: string\nsyncProfileResourceVersion:\ntype: string\ntlsSecretResourceVersion:\ntype: string\nrequired:\n- connectionProfileResourceVersion\n- syncProfileResourceVersion\ntype: object\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.12.1\nname: targetconnectionprofiles.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: TargetConnectionProfile\nlistKind: TargetConnectionProfileList\nplural: targetconnectionprofiles\nsingular: targetconnectionprofile\nscope: Namespaced\nversions:\n- name: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: TargetConnectionProfile is the Schema for the TargetConnectionProfile\nAPI\nproperties:\napiVersion:\ndescription: 'APIVersion defines the versioned schema of this representation\nof an object. Servers should convert recognized schemas to the latest\ninternal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\ntype: string\nkind:\ndescription: 'Kind is a string value representing the REST resource this\nobject represents. Servers may infer this from the endpoint the client\nsubmits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: TargetConnectionProfileSpec defines the desired state of\nTargetConnectionProfile\nproperties:\ncommitCandidate:\ndefault: candidate\nenum:\n- candidate\n- running\ntype: string\nx-kubernetes-validations:\n- message: UseOperationRemove is immutable\nrule: self == oldSelf\nconnectRetry:\ndefault: 10s\ntype: string\nx-kubernetes-validations:\n- message: connectRetry is immutable\nrule: self == oldSelf\nencoding:\ndefault: ASCII\nenum:\n- unknown\n- JSON\n- JSON_IETF\n- bytes\n- protobuf\n- ASCII\n- config\ntype: string\nx-kubernetes-validations:\n- message: encoding is immutable\nrule: self == oldSelf\nincludeNS:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: includeNS is immutable\nrule: self == oldSelf\ninsecure:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: insecure is immutable\nrule: self == oldSelf\noperationWithNS:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: operationWithNS is immutable\nrule: self == oldSelf\nport:\ndefault: 57400\ndescription: Port defines the port on which the scan runs\ntype: integer\nx-kubernetes-validations:\n- message: port is immutable\nrule: self == oldSelf\npreferredNetconfVersion:\ndefault: \"1.0\"\nenum:\n- \"1.0\"\n- \"1.1\"\ntype: string\nx-kubernetes-validations:\n- message: preferredNetconfVersion is immutable\nrule: self == oldSelf\nprotocol:\ndefault: gnmi\nenum:\n- unknown\n- gnmi\n- netconf\n- noop\ntype: string\nx-kubernetes-validations:\n- message: protocol is immutable\nrule: self == oldSelf\nskipVerify:\ndefault: true\ntype: boolean\nx-kubernetes-validations:\n- message: skipVerify is immutable\nrule: self == oldSelf\ntimeout:\ndefault: 10s\ntype: string\nx-kubernetes-validations:\n- message: timeout is immutable\nrule: self == oldSelf\nuseOperationRemove:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: UseOperationRemove is immutable\nrule: self == oldSelf\nrequired:\n- port\n- protocol\ntype: object\ntype: object\nserved: true\nstorage: true\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.12.1\nname: discoveryrules.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: DiscoveryRule\nlistKind: DiscoveryRuleList\nplural: discoveryrules\nsingular: discoveryrule\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: DiscoveryRule is the Schema for the DiscoveryRule API\nproperties:\napiVersion:\ndescription: 'APIVersion defines the versioned schema of this representation\nof an object. Servers should convert recognized schemas to the latest\ninternal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\ntype: string\nkind:\ndescription: 'Kind is a string value representing the REST resource this\nobject represents. Servers may infer this from the endpoint the client\nsubmits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: DiscoveryRuleSpec defines the desired state of DiscoveryRule\nproperties:\naddresses:\ndescription: IP Prefixes for which this discovery rule applies\nitems:\nproperties:\naddress:\ndescription: Address (specified as IP or DNS name) of the target/target(s)\ntype: string\nhostName:\ndescription: HostName of the ip prefix; used for /32 or /128\naddresses with discovery disabled\ntype: string\nrequired:\n- address\ntype: object\ntype: array\nconcurrentScans:\ndescription: number of concurrent IP scan\nformat: int64\ntype: integer\ndefaultSchema:\ndescription: DefaultSchema define the default schema used to connect\nto a target Indicates that discovery is disable; cannot be used\nfor prefix based discovery rules\nproperties:\nprovider:\ndescription: Provider specifies the provider of the schema.\ntype: string\nversion:\ndescription: Version defines the version of the schema\ntype: string\nrequired:\n- provider\n- version\ntype: object\ndiscoveryProfile:\ndescription: DiscoveryProfile define the profiles the discovery controller\nuses to discover targets\nproperties:\nconnectionProfiles:\ndescription: ConnectionProfiles define the list of profiles the\ndiscovery controller uses to discover the target. The order\nin which they are specified is the order in which discovery\nis executed.\nitems:\ntype: string\ntype: array\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the target\ntype: string\ntlsSecret:\ndescription: TLSSecret defines the name of the TLS secret to connect\nto the target if mtls is used\ntype: string\nrequired:\n- connectionProfiles\n- credentials\ntype: object\nperiod:\ndescription: Period defines the wait period between discovery rule\nruns\ntype: string\npodSelector:\ndescription: PodSelector defines the pod selector for which this discovery\nrule applies\nproperties:\nmatchExpressions:\ndescription: matchExpressions is a list of label selector requirements.\nThe requirements are ANDed.\nitems:\ndescription: A label selector requirement is a selector that\ncontains values, a key, and an operator that relates the key\nand values.\nproperties:\nkey:\ndescription: key is the label key that the selector applies\nto.\ntype: string\noperator:\ndescription: operator represents a key's relationship to\na set of values. Valid operators are In, NotIn, Exists\nand DoesNotExist.\ntype: string\nvalues:\ndescription: values is an array of string values. If the\noperator is In or NotIn, the values array must be non-empty.\nIf the operator is Exists or DoesNotExist, the values\narray must be empty. This array is replaced during a strategic\nmerge patch.\nitems:\ntype: string\ntype: array\nrequired:\n- key\n- operator\ntype: object\ntype: array\nmatchLabels:\nadditionalProperties:\ntype: string\ndescription: matchLabels is a map of {key,value} pairs. A single\n{key,value} in the matchLabels map is equivalent to an element\nof matchExpressions, whose key field is \"key\", the operator\nis \"In\", and the values array contains only \"value\". The requirements\nare ANDed.\ntype: object\ntype: object\nx-kubernetes-map-type: atomic\nprefixes:\ndescription: IP Prefixes for which this discovery rule applies\nitems:\nproperties:\nexcludes:\ndescription: IP Prefixes to be excluded\nitems:\ntype: string\ntype: array\nprefix:\ndescription: Prefix of the target/target(s)\ntype: string\nrequired:\n- prefix\ntype: object\ntype: array\nserviceDomain:\ndescription: ServiceDomain defines the service domain of the cluster,\nused by svc discovery to identify the domain name in the k8s cluster\nwhere the service reside.\ntype: string\nserviceSelector:\ndescription: ServiceSelector defines the service selector for which\nthis discovery rule applies\nproperties:\nmatchExpressions:\ndescription: matchExpressions is a list of label selector requirements.\nThe requirements are ANDed.\nitems:\ndescription: A label selector requirement is a selector that\ncontains values, a key, and an operator that relates the key\nand values.\nproperties:\nkey:\ndescription: key is the label key that the selector applies\nto.\ntype: string\noperator:\ndescription: operator represents a key's relationship to\na set of values. Valid operators are In, NotIn, Exists\nand DoesNotExist.\ntype: string\nvalues:\ndescription: values is an array of string values. If the\noperator is In or NotIn, the values array must be non-empty.\nIf the operator is Exists or DoesNotExist, the values\narray must be empty. This array is replaced during a strategic\nmerge patch.\nitems:\ntype: string\ntype: array\nrequired:\n- key\n- operator\ntype: object\ntype: array\nmatchLabels:\nadditionalProperties:\ntype: string\ndescription: matchLabels is a map of {key,value} pairs. A single\n{key,value} in the matchLabels map is equivalent to an element\nof matchExpressions, whose key field is \"key\", the operator\nis \"In\", and the values array contains only \"value\". The requirements\nare ANDed.\ntype: object\ntype: object\nx-kubernetes-map-type: atomic\ntargetConnectionProfiles:\ndescription: TargetConnectionProfiles define the profile the discovery\ncontroller uses to create targets once discovered\nitems:\nproperties:\nconnectionProfile:\ndescription: ConnectionProfile define the profile used to connect\nto the target once discovered\ntype: string\ncredentials:\ndescription: Credentials defines the name of the secret that\nholds the credentials to connect to the target\ntype: string\nsyncProfile:\ndescription: SyncProfile define the profile used to sync to\nthe target config once discovered\ntype: string\ntlsSecret:\ndescription: TLSSecret defines the name of the TLS secret to\nconnect to the target if mtls is used\ntype: string\nrequired:\n- connectionProfile\n- credentials\ntype: object\ntype: array\ntargetTemplate:\ndescription: TargetTemplate defines the template the discovery controller\nuses to create the targets as a result of the discovery\nproperties:\nannotations:\nadditionalProperties:\ntype: string\ndescription: Annotations is a key value map to be copied to the\ntarget CR.\ntype: object\nlabels:\nadditionalProperties:\ntype: string\ndescription: Labels is a key value map to be copied to the target\nCR.\ntype: object\nnameTemplate:\ndescription: target name template\ntype: string\nx-kubernetes-validations:\n- message: nameTemplate is immutable\nrule: self == oldSelf\ntype: object\nrequired:\n- targetConnectionProfiles\ntype: object\nstatus:\ndescription: DiscoveryRuleStatus defines the observed state of DiscoveryRule\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: lastTransitionTime is the last time the condition\ntransitioned from one status to another. This should be when\nthe underlying condition changed.  If that is not known, then\nusing the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: message is a human readable message indicating\ndetails about the transition. This may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: observedGeneration represents the .metadata.generation\nthat the condition was set based upon. For instance, if .metadata.generation\nis currently 12, but the .status.conditions[x].observedGeneration\nis 9, the condition is out of date with respect to the current\nstate of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: reason contains a programmatic identifier indicating\nthe reason for the condition's last transition. Producers\nof specific condition types may define expected values and\nmeanings for this field, and whether the values are considered\na guaranteed API. The value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: type of condition in CamelCase or in foo.example.com/CamelCase.\n--- Many .condition.type values are consistent across resources\nlike Available, but because arbitrary conditions can be useful\n(see .node.status.conditions), the ability to deconflict is\nimportant. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nstartTime:\ndescription: StartTime identifies when the dr got started\nformat: date-time\ntype: string\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiregistration.k8s.io/v1\nkind: APIService\nmetadata:\nname: v1alpha1.config.sdcio.dev\nspec:\ngroup: config.sdcio.dev\ngroupPriorityMinimum: 1000\ninsecureSkipTLSVerify: true\nservice:\nname: config-server\nnamespace: network-system\nport: 6443\nversion: v1alpha1\nversionPriority: 15\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nlabels:\nsdcio.dev/config-server: \"true\"\nname: config-server\nnamespace: network-system\nspec:\nreplicas: 1\nselector:\nmatchLabels:\nsdcio.dev/config-server: \"true\"\nstrategy:\ntype: Recreate\ntemplate:\nmetadata:\nlabels:\nsdcio.dev/config-server: \"true\"\nsdcio.dev/data-server: \"true\"\nspec:\ncontainers:\n- args:\n- --tls-cert-file=/apiserver.local.config/certificates/tls.crt\n- --tls-private-key-file=/apiserver.local.config/certificates/tls.key\n- --feature-gates=APIPriorityAndFairness=false\n- --audit-log-path=-\n- --audit-log-maxage=0\n- --audit-log-maxbackup=0\n- --secure-port=6443\ncommand:\n- /app/config-server\nenv:\n- name: POD_IP\nvalueFrom:\nfieldRef:\nfieldPath: status.podIP\n- name: POD_NAMESPACE\nvalueFrom:\nfieldRef:\napiVersion: v1\nfieldPath: metadata.namespace\n- name: NODE_NAME\nvalueFrom:\nfieldRef:\napiVersion: v1\nfieldPath: spec.nodeName\n- name: NODE_IP\nvalueFrom:\nfieldRef:\napiVersion: v1\nfieldPath: status.hostIP\n- name: ENABLE_TARGETDATASTORE\nvalue: \"true\"\n- name: ENABLE_TARGETCONFIGSERVER\nvalue: \"true\"\n- name: ENABLE_DISCOVERYRULE\nvalue: \"true\"\n- name: ENABLE_SCHEMA\nvalue: \"true\"\n- name: ENABLE_CONFIG\nvalue: \"true\"\n- name: ENABLE_CONFIGSET\nvalue: \"true\"\nimage: ghcr.io/sdcio/config-server:v0.0.22\nimagePullPolicy: Always\nname: config-server\nports:\n- containerPort: 6443\nname: api-service\nvolumeMounts:\n- mountPath: /apiserver.local.config/certificates\nname: apiserver-certs\nreadOnly: true\n- mountPath: /config\nname: config-store\n- mountPath: /schemas\nname: schema-store\n- args:\n- --config=/config/data-server.yaml\ncommand:\n- /app/data-server\nimage: ghcr.io/sdcio/data-server:v0.0.36\nimagePullPolicy: Always\nname: data-server\nvolumeMounts:\n- mountPath: /config\nname: data-server-config\n- mountPath: /cached/caches\nname: cache\n- mountPath: /schemas\nname: schema-store\n- mountPath: /schemadb\nname: schema-db\nsecurityContext:\nfsGroup: 10000\nrunAsGroup: 10000\nrunAsUser: 10000\nserviceAccountName: config-server\nvolumes:\n- configMap:\nname: data-server\nname: data-server-config\n- name: apiserver-certs\nsecret:\nsecretName: config-server-cert\n- emptyDir:\nsizeLimit: 10Gi\nname: cache\n- name: config-store\npersistentVolumeClaim:\nclaimName: pvc-config-store\n- name: schema-store\npersistentVolumeClaim:\nclaimName: pvc-schema-store\n- name: schema-db\npersistentVolumeClaim:\nclaimName: pvc-schema-db\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\nname: config-server-clusterrole\nrules:\n- apiGroups:\n- \"\"\nresources:\n- namespaces\n- secrets\n- services\n- pods\nverbs:\n- get\n- watch\n- list\n- apiGroups:\n- \"\"\nresources:\n- events\nverbs:\n- create\n- patch\n- apiGroups:\n- admissionregistration.k8s.io\nresources:\n- mutatingwebhookconfigurations\n- validatingwebhookconfigurations\nverbs:\n- get\n- watch\n- list\n- apiGroups:\n- flowcontrol.apiserver.k8s.io\nresources:\n- flowschemas\n- prioritylevelconfigurations\nverbs:\n- get\n- watch\n- list\n- apiGroups:\n- config.sdcio.dev\nresources:\n- configs\n- configs/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- config.sdcio.dev\nresources:\n- configsets\n- configsets/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- config.sdcio.dev\nresources:\n- unmanagedconfigs\n- unmanagedconfigs/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- targets\n- targets/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- targetconnectionprofiles\n- targetsyncprofiles\nverbs:\n- get\n- watch\n- list\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- discoveryrules\n- discoveryrules/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- schemas\n- schemas/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- coordination.k8s.io\nresources:\n- leases\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\nname: config-server-clusterrolebinding\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: config-server-clusterrole\nsubjects:\n- kind: ServiceAccount\nname: config-server\nnamespace: network-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\nname: config:system:auth-delegator\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: system:auth-delegator\nsubjects:\n- kind: ServiceAccount\nname: config-server\nnamespace: network-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\nname: aggregated-apiserver-role\nnamespace: network-system\nrules:\n- apiGroups:\n- \"\"\nresources:\n- serviceaccounts\nverbs:\n- get\n- apiGroups:\n- \"\"\nresources:\n- serviceaccounts/token\nverbs:\n- create\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\nname: config-server-clusterrolebinding\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: config-server-clusterrole\nsubjects:\n- kind: ServiceAccount\nname: config-server\nnamespace: network-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\nname: config-auth-reader\nnamespace: kube-system\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: Role\nname: extension-apiserver-authentication-reader\nsubjects:\n- kind: ServiceAccount\nname: config-server\nnamespace: network-system\n---\napiVersion: v1\ndata:\ndata-server.yaml: \"grpc-server:\\n  schema-server:\\n    enabled: true\\n    schemas-directory:\n./schemas\\n\\n  data-server:\\n    max-candidates: 16\\n\\n  max-recv-msg-size: 25165824\n# 24 * 1024 * 1024 (24MB)\\n\\ndatastores: # this specifies MAIN datastores\\n\\nschema-store:\\n\n\\ # type is either memory or persistent (default)\\n  type: persistent\\n  path:\n\\\"/schemadb\\\"\\n\\ncache: \\n  type: local\\n  store-type: badgerdb\\n  dir: \\\"/cached/caches\\\"\\n\\nprometheus:\\n\n\\ address: \\\":56090\\\"\"\nkind: ConfigMap\nmetadata:\nname: data-server\nnamespace: network-system\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: pvc-config-store\nnamespace: network-system\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 2Gi\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: pvc-schema-db\nnamespace: network-system\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 10Gi\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: pvc-schema-store\nnamespace: network-system\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 10Gi\n---\napiVersion: v1\ndata:\ntls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZekNDQWt1Z0F3SUJBZ0lJSC9mSFZHenZ3cnN3RFFZSktvWklodmNOQVFFTEJRQXdaVEVMTUFrR0ExVUUKQmhNQ2RXNHhDekFKQmdOVkJBZ01Bbk4wTVFvd0NBWURWUVFIREFGc01Rb3dDQVlEVlFRS0RBRnZNUXN3Q1FZRApWUVFMREFKdmRURWtNQ0lHQTFVRUF3d2JZbUZ6YVdNdFkyVnlkR2xtYVdOaGRHVXRZWFYwYUc5eWFYUjVNQjRYCkRUSXlNRE16TVRBNU1UYzFNMW9YRFRNeU1ETXlPREE1TVRjMU5Gb3dIREVhTUJnR0ExVUVBeE1SWW1GemFXTXUKWkdWbVlYVnNkQzV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUN0TUt0eApjc3Rjdk8rdDVMazZRQkRBZ3g1akZCL2F1dStVb3BDR2Z6VitaRW5obldpaC8xMVZ2ek44cjhmdGZuUkZGTVZ6CmJqYlVhSXNDOFc1eGJDNXNpc2VrdnVBWDlpanUzMlFybEU0RTR1UzNYREdVZkhGSFhMcWxBRU9RclUvRzQ0RGgKa0I3ajJOcDRzbk9IckF0aDA3TStvbXBmVklhSTlkQmdYY3hsUE5QRkNNamlOb1VweVM4eXNha3RQRXFjZTBpawpmNDBYVERmN1YwekFFelI0QkE4Yzh0b05UMVNnSXFIV0xueERKcnZRempDaTVFN2NMNkpmTmhlZDQ5MUVNWlEwCmVnbkV5bXd6d1Jya3BYTkZ4RHJzSXpOZmhHelB6RGJLdmFIUHh5NUwvM3h3clZ3VHllbklaOVExK0tjemtCSksKRXZIaVVKL1BML0VYZkloakFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVQpCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3TFFZRFZSMFJCQ1l3SklJSmJHOWpZV3hvYjNOMGdoRmlZWE5wCll5NWtaV1poZFd4MExuTjJZNGNFZndBQUFUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFEa1hsbGZMTlpzWDEKYmp1b0h4RXVUWitaODlMWUxPUDBMM0dHMFgwdVdkZzJFcXY1bmZNRHVRVmJIRmt5dVo3ZDlDY01QYk12MTdDWgoxZGwwQk1GQTJkTkJzK3V1UXFIUFh3RkI4SFdPSDhBc1pMMnYvbG91T3g2dU1QQk9uWUhuQ3pFY21FQXZoR2dLCkpXMDNkd2QwNlJPeUdLT29qSklFTlRnd0xnQ1dZSytPWmIzQklyMUJqS012Q2dHN3pJVDFUUVNna3hGN1NGNzUKYk5BaEdOa0NWMGVrSnNXQWk1UGhzVS9IdWthdGVHUGNMS3hia0RGdHpSV2tRNmdKUXhkZmVuOVBKTjVJVCt4RQpFci8wYUkrOFM5Y1FPUnk0VTNDSFRodmlnOGFyZ3FucmFWMU92OXZNTWxzZ3pnYXc3SjdaeGtkWWwrSkMyWUcvCjJrUThVd1IzQnc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\ntls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBclRDcmNYTExYTHp2cmVTNU9rQVF3SU1lWXhRZjJycnZsS0tRaG44MWZtUko0WjFvCm9mOWRWYjh6ZksvSDdYNTBSUlRGYzI0MjFHaUxBdkZ1Y1d3dWJJckhwTDdnRi9Zbzd0OWtLNVJPQk9Ma3Qxd3gKbEh4eFIxeTZwUUJEa0sxUHh1T0E0WkFlNDlqYWVMSnpoNndMWWRPelBxSnFYMVNHaVBYUVlGM01aVHpUeFFqSQo0amFGS2Nrdk1yR3BMVHhLbkh0SXBIK05GMHczKzFkTXdCTTBlQVFQSFBMYURVOVVvQ0toMWk1OFF5YTcwTTR3Cm91Uk8zQytpWHpZWG5lUGRSREdVTkhvSnhNcHNNOEVhNUtWelJjUTY3Q016WDRSc3o4dzJ5cjJoejhjdVMvOTgKY0sxY0U4bnB5R2ZVTmZpbk01QVNTaEx4NGxDZnp5L3hGM3lJWXdJREFRQUJBb0lCQUJWWU16ajNLZU1URWdMLwpkbWljYnJRYk5NcUhOMm5Rc2loQ1pNZCt0QXdRdGg1Tk5SRUtGT20xZDlYOUlBbkFGUHBTbGdjazVUTUdjMk40CmQrRVlzUndGZXBkdVF0WVJLM2hOSmQ1TkY5UjRWakhXOWZGVDZPNGZtbzB0WENaZmhiNkFXV2p6Unl0VGxaRmMKaE9xS3BKaDQ2OVZqVlBMTXl3dmtKN3RJdENFaHl4b0t0VVhwcm45SXBLNnNUa051OTFmMVA4czJNbDd1RlVqYwpJdGhMb3JnMEYyU3RaeEJmVDJGaFRYaFZxRlRJS1pmazFGbnRpbUwyWlQrRXZzQlpnZHYwa2Z1Q2hFdE5jRW1PCnRZc2dKT3ExTWF5M2d0dlk3VDB6WkRtTTIrOVpKQ0JLcm8yV2IxdGw0RHNnaWNkR0I2SlhnTi81aklSMTNmbDUKMTRJd1hza0NnWUVBemtQb1MrTko0QkJkR3RYem5tZWVhRFFQVVU0dkF1R3YyU2VtajR3RG1KRXB6aDdoMWlQZAprVWxmYjcxZ1VMbmk0SDVkVFlyVFpwOElUaXZvM3A1bUNrV3lFV09wMmx4VUZoM3JnVWN6NWt0RUhkejl1bjNoCnFYNVJpTWlkM0Y3dWRIODdqYTdJVi9mUEFGSnlremQrWHNaZGFuT0tPK1UvV0t2ek0rSFEzUThDZ1lFQTF2TWoKdml3dnFxM0FBa0VpN2RlOUxLUE1uS1N5VE9BdHQzS2dqV1RLNU5aQUdqeWpoSGxEbjRCempSS25DWk8xY0lJZwo0Wnl1VzQrUlB5aGQreEFubzVoMVh0Ny9LYzNFaW1ucjBLU0ZmRWVza2NORFIyVHNTdCtjYTl6aFFPTFJ0TWRCCnE5OWZDeFprK1pmcEhpSzJCK0pHVExNdVJRY0tDYU43RldKTkIyMENnWUJhc2k5bGx3WjMySm9uMzZYa3BDbGEKSm5JSnpUZ01xMUlZU1VBSzVJVDhRL0ErNndOZ2xwcXBkTHJiTmtrd2xkdjEzSHFJU3gvVGd1QXpCMG01QWF0YQpudlRDZ3JGQUM5TUplcFNBWHQrcVJyUW44WEU3M0hncWdCbTM3SWJGVEpUTGN0cXIzUXZJNm5VQjdqN2xEc1NwClJjM3pyZVE5bS9yenNZQVo4eFJVN3dLQmdRQ0JYTjg4Q3JlOVRzaHFFdTJFbXZ4ZEswOXZUcWVJSUxzaTFyZk4Kb01XREozWjQwOW5OVm5YZVBwNU1YdGRzcWhyZVZWS1l0WVV4MFp1bW1STEdrSmhxbXN5NGhoaW0vaEcxQTc1SwpXVm1FekZZTmU2aTRCUU00cEk4dFUwZTFsMHlDTWhGUjhTTHdOMUFaN3RUN3NBUkJobXFzcW9IRVJWSkRMc0phCndraDltUUtCZ0NYR2xoZzY4aVMzMldmSWVtYUFRMTJpNFRUUk1FNWppTFl0ZlkyREJTMDBWV3NxY0l1OEFUWm0KVHVoZHBRVG9mKzE3LzFyU0cyYnFaWFA2L0h3ak14OTVIdWlXbjVKSjA3RTduOUVCUDlkQTY0K0lHdWlvd0h5RAo2a3g3VVhuTUtTYXdiV2JxZ1JGZTFOZEdLbkh0ZE5GOGxndEdjdytxUTk3YkIreXFreXMxCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nkind: Secret\nmetadata:\nlabels:\nsdcio.dev/config-server: \"true\"\nname: config-server-cert\nnamespace: network-system\ntype: kubernetes.io/tls\n---\napiVersion: v1\nkind: Service\nmetadata:\nlabels:\nsdcio.dev/config-server: \"true\"\nname: config-server\nnamespace: network-system\nspec:\nports:\n- name: api-service\nport: 6443\ntargetPort: api-service\nselector:\nsdcio.dev/config-server: \"true\"\n---\napiVersion: v1\nkind: Service\nmetadata:\nlabels:\nsdcio.dev/config-server: \"true\"\nname: data-server\nnamespace: network-system\nspec:\nports:\n- port: 56000\nprotocol: TCP\ntargetPort: 56000\nselector:\nsdcio.dev/data-server: \"true\"\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\nname: config-server\nnamespace: network-system\n</code></pre>"},{"location":"getting-started/basic-usage/#verification_1","title":"Verification","text":"<p>To verify that the installation did succeed, the following resources can be checked.</p>"},{"location":"getting-started/basic-usage/#api-registration","title":"API Registration","text":"<p>Checking the api-registrations exist. <pre><code>kubectl get apiservices.apiregistration.k8s.io | grep \"sdcio.dev\\|NAME\"\n</code></pre></p> <p>The two services should be available. <pre><code>NAME                                   SERVICE                        AVAILABLE   AGE\nv1alpha1.config.sdcio.dev              network-system/config-server   True        6d\nv1alpha1.inv.sdcio.dev                 Local                          True        6d\n</code></pre> If the apiservices do not appear or do not show up as available, follow the Troubleshooting section.</p>"},{"location":"getting-started/basic-usage/#basic-usage-scenario","title":"Basic Usage Scenario","text":"<p>In the following the different kubernetes resources will be created, which are needed to manage the previousely deployed SR Linux instance.</p>"},{"location":"getting-started/basic-usage/#installation_6","title":"Installation","text":"<pre><code># Nokia SR Linux Yang Schema\nkubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/schema-nokia-srl-23.10.1.yaml\n# Connection Profile\nkubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/target-conn-profile-gnmi.yaml\n# Sync Profile\nkubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/target-sync-profile-gnmi.yaml\n# SRL Secret\nkubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/secret-srl.yaml\n# Discovery Rule\nkubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/discovery_address.yaml\n</code></pre> Nokia SR Linux Yang Schema Content <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: srl.nokia.sdcio.dev-23.10.1\nnamespace: default\nspec:\nrepoURL: https://github.com/nokia/srlinux-yang-models\nprovider: srl.nokia.sdcio.dev\nversion: 23.10.1\nkind: tag\nref: v23.10.1\ndirs:\n- src: srlinux-yang-models\ndst: .\nschema:\nmodels:\n- srl_nokia/models\nincludes:\n- ietf\n- openconfig/extensions\n- openconfig/openconfig-extensions.yang\nexcludes:\n- .*tools.*\n</code></pre> Discovery Rule Content <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dev1-address\nnamespace: default\nspec:\nperiod: 1m\naddresses:\n- address: 172.21.0.200\nhostName: dev1\ndiscoveryProfile:\ncredentials: srl.nokia.sdcio.dev connectionProfiles:\n- gnmi-skipverify\ntargetConnectionProfiles:\n- credentials: srl.nokia.sdcio.dev connectionProfile: gnmi-skipverify\nsyncProfile: gnmi-onchange\ntargetTemplate:\nlabels:\nsdcio.dev/region: us-east\n</code></pre> Connection Profile Content <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetConnectionProfile\nmetadata:\nname: gnmi-skipverify\nnamespace: default\nspec:\nport: 57400\nprotocol: gnmi\nencoding: ASCII\nskipVerify: true\ninsecure: false\n</code></pre> Sync Profile Content <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetSyncProfile\nmetadata:\nname: gnmi-onchange\nnamespace: default\nspec:\nbuffer: 0\nworkers: 10\nvalidate: true\nsync:\n- name: config\nprotocol: gnmi\npaths:\n- /\nmode: onChange\nencoding: config     # SRLinux specific encoding (id: 45)\n</code></pre> Nokia SR Linux Secret Content <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: srl.nokia.sdcio.dev namespace: default\ntype: kubernetes.io/basic-auth\nstringData:\nusername: admin\npassword: NokiaSrl1!\n</code></pre>"},{"location":"getting-started/basic-usage/#verification_2","title":"Verification","text":"<pre><code>kubectl get sdc\n</code></pre> <p>The output provides an overview of all the SDCIO originating CRs.</p> <p>First of all the <code>Ready</code> flag of the <code>Schema</code> CR is expected to be <code>True</code>. Which indicates, that the provided Yang Schema was successfully downloaded. Next, the <code>DiscoveryRule</code> is supposed to be <code>Ready=True</code>, which is a pre-requisite for the <code>Target</code> to be created by the <code>DiscoverRule</code> controller. On the Target, all three Fields (<code>Ready</code>, <code>Datastore</code> and <code>Config</code>) have to be <code>True</code> and in successfull connection the additional fields like Address, Platform, Serialnumber and MAC Address will be populated. <pre><code>NAME                                       READY\ndiscoveryrule.inv.sdcio.dev/dev1-address   True\n\nNAME                                               READY   URL                                            REF        PROVIDER              VERSION\nschema.inv.sdcio.dev/srl.nokia.sdcio.dev-23.10.1   True    https://github.com/nokia/srlinux-yang-models   v23.10.1   srl.nokia.sdcio.dev   23.10.1\n\nNAME                                                    AGE\ntargetconnectionprofile.inv.sdcio.dev/gnmi-skipverify   21m\n\nNAME                       READY   DATASTORE   CONFIG   PROVIDER              ADDRESS              PLATFORM      SERIALNUMBER     MACADDRESS\ntarget.inv.sdcio.dev/srl   True    True        True     srl.nokia.sdcio.dev   172.21.0.200:57400   7220 IXR-D3   Sim Serial No.   1A:AB:00:FF:00:00\n\nNAME                                            AGE\ntargetsyncprofile.inv.sdcio.dev/gnmi-onchange   21m\n</code></pre></p>"},{"location":"getting-started/basic-usage/#retrieve-configuration","title":"Retrieve Configuration","text":"<p>To retrieve the running configuration from the device, the <code>RunningConfig</code> CR can be queried. It contains an empty spec, but the config is presented in the <code>status</code> -&gt; <code>value</code> field.</p> <pre><code>kubectl get runningconfigs.config.sdcio.dev srl </code></pre> <p>The output is quite extensive so lets just take a look at the network-instance configuration.</p> <pre><code>kubectl get runningconfigs.config.sdcio.dev srl -ojsonpath=\"{.status.value.network-instance}\" | jq\n</code></pre> <p>Output: <pre><code>[\n{\n\"description\": \"Management network instance\",\n\"name\": \"mgmt\",\n\"protocols\": {\n\"linux\": {\n\"export-routes\": true,\n\"import-routes\": true\n}\n},\n\"type\": \"ip-vrf\"\n}\n]\n</code></pre></p>"},{"location":"getting-started/basic-usage/#apply-config","title":"Apply Config","text":"<p>To apply configuration for the <code>dev1</code> device apply the following <code>Config</code> CR.</p> <pre><code>kubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/config.yaml\n</code></pre> Config Content <pre><code>apiVersion: config.sdcio.dev/v1alpha1\nkind: Config\nmetadata:\nname: test\nnamespace: default\nlabels:\nconfig.sdcio.dev/targetName: dev1\nconfig.sdcio.dev/targetNamespace: default\nspec:\npriority: 10\nconfig:\n- path: /\nvalue:\ninterface:\n- name: \"system0\"\nadmin-state: \"enable\"\ndescription: \"k8s-system0-dummy\"\n</code></pre>"},{"location":"getting-started/basic-usage/#apply-configset","title":"Apply ConfigSet","text":"<p>To apply a <code>ConfigSet</code>, that is a configuration template that can be applied to multiple devices, apply the following <code>ConfigSet</code>.</p> <pre><code>kubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/configset.yaml\n</code></pre> ConfigSet Content <pre><code>apiVersion: config.sdcio.dev/v1alpha1\nkind: ConfigSet\nmetadata:\nname: intent1\nnamespace: default\nspec:\ntarget:\ntargetSelector:\nmatchLabels:\nsdcio.dev/region: us-east\npriority: 10\nconfig:\n- path: /\nvalue:\ninterface:\n- name: ethernet-1/1\nadmin-state: \"enable\"\ndescription: \"intent1\"\nvlan-tagging: true\nsubinterface:\n- index: 2\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 2\n- index: 3\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 3\n- index: 4\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 4\n</code></pre>"},{"location":"install/1_overview/","title":"Overview","text":"<p>The schema driven configuration system (<code>sdc</code>) consists of 4 components:</p> <ul> <li>schema-server</li> <li>data-server</li> <li>cache</li> <li>config-server</li> </ul> <p>The <code>config-server</code> depends on <code>kubernetes</code>, but the other 3 components (<code>schema-server</code>, <code>data-server</code> and <code>cache</code>) can be deployed independent from kubernetes.</p>"},{"location":"install/2_prereq/","title":"Pre-Requisites","text":""},{"location":"install/2_prereq/#kubectl","title":"kubectl","text":"<p>First install kubectl if not already installed</p>"},{"location":"install/2_prereq/#auto-completions-for-kubectl-optional","title":"Auto completions for kubectl (optional)","text":"bashzsh <pre><code>source &lt;(kubectl completion bash)\nalias k=kubectl\ncomplete -o default -F __start_kubectl k\n</code></pre> <pre><code>source &lt;(kubectl completion zsh)\nalias k=kubectl\ncomplete -F _start_kubectl k\n</code></pre>"},{"location":"install/2_prereq/#install-kubernetes-optional","title":"Install Kubernetes (optional)","text":"<p>To install <code>sdc</code> on a kubernetes cluster we first need to install a <code>kubernetes</code> cluster. <code>Sdc</code> has no special requirements on the <code>k8s</code> cluster, so any <code>k8s</code> distribution should work. </p> kindother <p>First install kind using kind</p> <p>In this example we install a <code>kind</code> cluster with name <code>sdc</code>. </p> <pre><code>kind create cluster --name sdc\n</code></pre>"},{"location":"install/2_prereq/#install-cert-manager","title":"Install Cert-Manager","text":"<p>The config-server (extension api-server) requires a certificate, which is created via cert-manager. The corresponding CA cert needs to be injected into the cabundle spec field of the <code>api-service</code> resource.</p> <pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.3/cert-manager.yaml\n# If the SDCIO resources, see below are being applied to fast, the webhook of the cert-manager is not already there.\n# Hence we need to wait for the resource be become Available\nkubectl wait -n cert-manager --for=condition=Available=True --timeout=300s deployments.apps cert-manager-webhook\n</code></pre>"},{"location":"install/3_k8s_collocated/","title":"Kubernetes-collocated","text":"<p>First ensure the pre-requisites are met</p>"},{"location":"install/3_k8s_collocated/#install-sdc-components","title":"Install SDC Components","text":"<p>Once the cluster is deployed we install the <code>sdc</code> components. These manifests deploy sdc as a deployment where the pod contains 2 containers:</p> <ol> <li>the config-server container with the various controllers</li> <li>the data-server/schema-server/cache collocated in a single container</li> </ol> <p>To install SDCIO, copy the following snippet into a shell and execute it. <pre><code>kubectl apply -f https://docs.sdcio.dev/artifacts/basic-usage/colocated.yaml\n</code></pre></p> Artifact Content <pre><code>---\napiVersion: v1\nkind: Namespace\nmetadata:\nname: network-system\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.12.1\nname: schemas.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: Schema\nlistKind: SchemaList\nplural: schemas\nsingular: schema\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\n- jsonPath: .spec.repoURL\nname: URL\ntype: string\n- jsonPath: .spec.ref\nname: REF\ntype: string\n- jsonPath: .spec.provider\nname: PROVIDER\ntype: string\n- jsonPath: .spec.version\nname: VERSION\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: Schema is the Schema for the Schema API\nproperties:\napiVersion:\ndescription: 'APIVersion defines the versioned schema of this representation\nof an object. Servers should convert recognized schemas to the latest\ninternal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\ntype: string\nkind:\ndescription: 'Kind is a string value representing the REST resource this\nobject represents. Servers may infer this from the endpoint the client\nsubmits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: SchemaSpec defines the desired state of Schema\nproperties:\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the repo\ntype: string\nx-kubernetes-validations:\n- message: credentials is immutable\nrule: self == oldSelf\ndirs:\ndescription: Dirs defines the list of directories that identified\nthe provider schema in src/dst pairs relative within the repository\nitems:\ndescription: SrcDstPath provide a src/dst pair for the loader to\ndownload the schema from a specific src in the repository to a\ngiven destination in the schema server\nproperties:\ndst:\ndescription: Dst is the relative directory in the schema server\ntype: string\nsrc:\ndescription: Src is the relative directory in the repository\nURL\ntype: string\nrequired:\n- dst\n- src\ntype: object\nmaxItems: 10\ntype: array\nx-kubernetes-validations:\n- message: dirs is immutable\nrule: oldSelf.all(x, x in self)\nkind:\ndefault: tag\ndescription: Kind defines the that the BranchOrTag string is a repository\nbranch or a tag\nenum:\n- branch\n- tag\ntype: string\nprovider:\ndescription: Provider specifies the provider of the schema.\ntype: string\nx-kubernetes-validations:\n- message: provider is immutable\nrule: self == oldSelf\nref:\ndescription: Ref defines the branch or tag of the repository corresponding\nto the provider schema version\ntype: string\nx-kubernetes-validations:\n- message: ref is immutable\nrule: self == oldSelf\nrepoURL:\ndescription: URL specifies the base URL for a given repository\ntype: string\nx-kubernetes-validations:\n- message: url is immutable\nrule: self == oldSelf\nschema:\ndescription: Schema provides the details of which files must be used\nfor the models and which files/directories cana be excludes\nproperties:\nexcludes:\ndescription: Excludes defines the list of files/directories to\nbe excluded\nitems:\ntype: string\nmaxItems: 64\ntype: array\nx-kubernetes-validations:\n- message: excludes is immutable\nrule: oldSelf.all(x, x in self)\nincludes:\ndescription: Excludes defines the list of files/directories to\nbe excluded\nitems:\ntype: string\nmaxItems: 64\ntype: array\nx-kubernetes-validations:\n- message: includes is immutable\nrule: oldSelf.all(x, x in self)\nmodels:\ndescription: Models defines the list of files/directories to be\nused as a model\nitems:\ntype: string\nmaxItems: 64\ntype: array\nx-kubernetes-validations:\n- message: models is immutable\nrule: oldSelf.all(x, x in self)\ntype: object\nversion:\ndescription: Version defines the version of the schema\ntype: string\nx-kubernetes-validations:\n- message: version is immutable\nrule: self == oldSelf\nrequired:\n- kind\n- provider\n- ref\n- repoURL\n- schema\n- version\ntype: object\nstatus:\ndescription: SchemaStatus defines the observed state of Schema\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: lastTransitionTime is the last time the condition\ntransitioned from one status to another. This should be when\nthe underlying condition changed.  If that is not known, then\nusing the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: message is a human readable message indicating\ndetails about the transition. This may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: observedGeneration represents the .metadata.generation\nthat the condition was set based upon. For instance, if .metadata.generation\nis currently 12, but the .status.conditions[x].observedGeneration\nis 9, the condition is out of date with respect to the current\nstate of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: reason contains a programmatic identifier indicating\nthe reason for the condition's last transition. Producers\nof specific condition types may define expected values and\nmeanings for this field, and whether the values are considered\na guaranteed API. The value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: type of condition in CamelCase or in foo.example.com/CamelCase.\n--- Many .condition.type values are consistent across resources\nlike Available, but because arbitrary conditions can be useful\n(see .node.status.conditions), the ability to deconflict is\nimportant. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.12.1\nname: targetsyncprofiles.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: TargetSyncProfile\nlistKind: TargetSyncProfileList\nplural: targetsyncprofiles\nsingular: targetsyncprofile\nscope: Namespaced\nversions:\n- name: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: TargetSyncProfile is the Schema for the TargetSyncProfile API\nproperties:\napiVersion:\ndescription: 'APIVersion defines the versioned schema of this representation\nof an object. Servers should convert recognized schemas to the latest\ninternal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\ntype: string\nkind:\ndescription: 'Kind is a string value representing the REST resource this\nobject represents. Servers may infer this from the endpoint the client\nsubmits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: TargetSyncProfileSpec defines the desired state of TargetSyncProfile\nproperties:\nbuffer:\ndefault: 0\nformat: int64\ntype: integer\nx-kubernetes-validations:\n- message: buffer is immutable\nrule: self == oldSelf\nsync:\nitems:\ndescription: TargetSyncProfileSync defines the desired state of\nTargetSyncProfileSync\nproperties:\nencoding:\ndefault: ASCII\nenum:\n- unknown\n- JSON\n- JSON_IETF\n- bytes\n- protobuf\n- ASCII\n- config\ntype: string\ninterval:\ndefault: 60s\ntype: string\nmode:\nenum:\n- unknown\n- onChange\n- sample\n- once\n- get\ntype: string\nname:\ntype: string\npaths:\nitems:\ntype: string\nmaxItems: 10\ntype: array\nprotocol:\ndefault: gnmi\nenum:\n- unknown\n- gnmi\n- netconf\n- noop\ntype: string\nrequired:\n- mode\n- name\n- paths\n- protocol\ntype: object\nmaxItems: 10\ntype: array\nx-kubernetes-validations:\n- message: sync may only be added\nrule: oldSelf.all(x, x in self)\nvalidate:\ndefault: true\ntype: boolean\nx-kubernetes-validations:\n- message: validate is immutable\nrule: self == oldSelf\nworkers:\ndefault: 10\nformat: int64\ntype: integer\nx-kubernetes-validations:\n- message: workers is immutable\nrule: self == oldSelf\ntype: object\nx-kubernetes-validations:\n- message: sync is required once set\nrule: '!has(oldSelf.sync) || has(self.sync)'\ntype: object\nserved: true\nstorage: true\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.12.1\nname: targets.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: Target\nlistKind: TargetList\nplural: targets\nsingular: target\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\n- jsonPath: .status.conditions[?(@.type=='Ready')].message\nname: REASON\ntype: string\n- jsonPath: .spec.provider\nname: PROVIDER\ntype: string\n- jsonPath: .spec.address\nname: ADDRESS\ntype: string\n- jsonPath: .status.discoveryInfo.platform\nname: PLATFORM\ntype: string\n- jsonPath: .status.discoveryInfo.serialNumber\nname: SERIALNUMBER\ntype: string\n- jsonPath: .status.discoveryInfo.macAddress\nname: MACADDRESS\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: Target is the Schema for the Target API\nproperties:\napiVersion:\ndescription: 'APIVersion defines the versioned schema of this representation\nof an object. Servers should convert recognized schemas to the latest\ninternal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\ntype: string\nkind:\ndescription: 'Kind is a string value representing the REST resource this\nobject represents. Servers may infer this from the endpoint the client\nsubmits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: TargetSpec defines the desired state of Target\nproperties:\naddress:\ndescription: Address defines the address to connect to the target\ntype: string\nconnectionProfile:\ndescription: ConnectionProfile define the profile used to connect\nto the target once discovered\ntype: string\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the target\ntype: string\nprovider:\ndescription: Provider specifies the provider using this target.\ntype: string\nsyncProfile:\ndescription: SyncProfile define the profile used to sync to the target\nconfig once discovered\ntype: string\ntlsSecret:\ndescription: TLSSecret defines the name of the TLS secret to connect\nto the target if mtls is used\ntype: string\nrequired:\n- address\n- connectionProfile\n- credentials\n- provider\ntype: object\nstatus:\ndescription: TargetStatus defines the observed state of Target\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: lastTransitionTime is the last time the condition\ntransitioned from one status to another. This should be when\nthe underlying condition changed.  If that is not known, then\nusing the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: message is a human readable message indicating\ndetails about the transition. This may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: observedGeneration represents the .metadata.generation\nthat the condition was set based upon. For instance, if .metadata.generation\nis currently 12, but the .status.conditions[x].observedGeneration\nis 9, the condition is out of date with respect to the current\nstate of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: reason contains a programmatic identifier indicating\nthe reason for the condition's last transition. Producers\nof specific condition types may define expected values and\nmeanings for this field, and whether the values are considered\na guaranteed API. The value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: type of condition in CamelCase or in foo.example.com/CamelCase.\n--- Many .condition.type values are consistent across resources\nlike Available, but because arbitrary conditions can be useful\n(see .node.status.conditions), the ability to deconflict is\nimportant. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\ndiscoveryInfo:\ndescription: Discovery info defines the information retrieved during\ndiscovery\nproperties:\nhostname:\ndescription: HostName associated with the target\ntype: string\nlastSeen:\ndescription: Last discovery time\nformat: date-time\ntype: string\nmacAddress:\ndescription: MacAddress associated with the target\ntype: string\nplatform:\ndescription: Platform associated with the target\ntype: string\nprotocol:\ndescription: Protocol used for discovery\ntype: string\nprovider:\ndescription: Type associated with the target\ntype: string\nserialNumber:\ndescription: SerialNumber associated with the target\ntype: string\nsupportedEncodings:\ndescription: Supported Encodings of the target\nitems:\ntype: string\ntype: array\nversion:\ndescription: Version associated with the target\ntype: string\ntype: object\nusedReferences:\ndescription: UsedReferences track the resource used to reconcile the\ncr\nproperties:\nconnectionProfileResourceVersion:\ntype: string\nsecretResourceVersion:\ntype: string\nsyncProfileResourceVersion:\ntype: string\ntlsSecretResourceVersion:\ntype: string\nrequired:\n- connectionProfileResourceVersion\n- syncProfileResourceVersion\ntype: object\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.12.1\nname: targetconnectionprofiles.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: TargetConnectionProfile\nlistKind: TargetConnectionProfileList\nplural: targetconnectionprofiles\nsingular: targetconnectionprofile\nscope: Namespaced\nversions:\n- name: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: TargetConnectionProfile is the Schema for the TargetConnectionProfile\nAPI\nproperties:\napiVersion:\ndescription: 'APIVersion defines the versioned schema of this representation\nof an object. Servers should convert recognized schemas to the latest\ninternal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\ntype: string\nkind:\ndescription: 'Kind is a string value representing the REST resource this\nobject represents. Servers may infer this from the endpoint the client\nsubmits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: TargetConnectionProfileSpec defines the desired state of\nTargetConnectionProfile\nproperties:\ncommitCandidate:\ndefault: candidate\nenum:\n- candidate\n- running\ntype: string\nx-kubernetes-validations:\n- message: UseOperationRemove is immutable\nrule: self == oldSelf\nconnectRetry:\ndefault: 10s\ntype: string\nx-kubernetes-validations:\n- message: connectRetry is immutable\nrule: self == oldSelf\nencoding:\ndefault: ASCII\nenum:\n- unknown\n- JSON\n- JSON_IETF\n- bytes\n- protobuf\n- ASCII\n- config\ntype: string\nx-kubernetes-validations:\n- message: encoding is immutable\nrule: self == oldSelf\nincludeNS:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: includeNS is immutable\nrule: self == oldSelf\ninsecure:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: insecure is immutable\nrule: self == oldSelf\noperationWithNS:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: operationWithNS is immutable\nrule: self == oldSelf\nport:\ndefault: 57400\ndescription: Port defines the port on which the scan runs\ntype: integer\nx-kubernetes-validations:\n- message: port is immutable\nrule: self == oldSelf\npreferredNetconfVersion:\ndefault: \"1.0\"\nenum:\n- \"1.0\"\n- \"1.1\"\ntype: string\nx-kubernetes-validations:\n- message: preferredNetconfVersion is immutable\nrule: self == oldSelf\nprotocol:\ndefault: gnmi\nenum:\n- unknown\n- gnmi\n- netconf\n- noop\ntype: string\nx-kubernetes-validations:\n- message: protocol is immutable\nrule: self == oldSelf\nskipVerify:\ndefault: true\ntype: boolean\nx-kubernetes-validations:\n- message: skipVerify is immutable\nrule: self == oldSelf\ntimeout:\ndefault: 10s\ntype: string\nx-kubernetes-validations:\n- message: timeout is immutable\nrule: self == oldSelf\nuseOperationRemove:\ndefault: false\ntype: boolean\nx-kubernetes-validations:\n- message: UseOperationRemove is immutable\nrule: self == oldSelf\nrequired:\n- port\n- protocol\ntype: object\ntype: object\nserved: true\nstorage: true\n---\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nannotations:\ncontroller-gen.kubebuilder.io/version: v0.12.1\nname: discoveryrules.inv.sdcio.dev\nspec:\ngroup: inv.sdcio.dev\nnames:\ncategories:\n- sdc\n- inv\nkind: DiscoveryRule\nlistKind: DiscoveryRuleList\nplural: discoveryrules\nsingular: discoveryrule\nscope: Namespaced\nversions:\n- additionalPrinterColumns:\n- jsonPath: .status.conditions[?(@.type=='Ready')].status\nname: READY\ntype: string\nname: v1alpha1\nschema:\nopenAPIV3Schema:\ndescription: DiscoveryRule is the Schema for the DiscoveryRule API\nproperties:\napiVersion:\ndescription: 'APIVersion defines the versioned schema of this representation\nof an object. Servers should convert recognized schemas to the latest\ninternal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'\ntype: string\nkind:\ndescription: 'Kind is a string value representing the REST resource this\nobject represents. Servers may infer this from the endpoint the client\nsubmits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'\ntype: string\nmetadata:\ntype: object\nspec:\ndescription: DiscoveryRuleSpec defines the desired state of DiscoveryRule\nproperties:\naddresses:\ndescription: IP Prefixes for which this discovery rule applies\nitems:\nproperties:\naddress:\ndescription: Address (specified as IP or DNS name) of the target/target(s)\ntype: string\nhostName:\ndescription: HostName of the ip prefix; used for /32 or /128\naddresses with discovery disabled\ntype: string\nrequired:\n- address\ntype: object\ntype: array\nconcurrentScans:\ndescription: number of concurrent IP scan\nformat: int64\ntype: integer\ndefaultSchema:\ndescription: DefaultSchema define the default schema used to connect\nto a target Indicates that discovery is disable; cannot be used\nfor prefix based discovery rules\nproperties:\nprovider:\ndescription: Provider specifies the provider of the schema.\ntype: string\nversion:\ndescription: Version defines the version of the schema\ntype: string\nrequired:\n- provider\n- version\ntype: object\ndiscoveryProfile:\ndescription: DiscoveryProfile define the profiles the discovery controller\nuses to discover targets\nproperties:\nconnectionProfiles:\ndescription: ConnectionProfiles define the list of profiles the\ndiscovery controller uses to discover the target. The order\nin which they are specified is the order in which discovery\nis executed.\nitems:\ntype: string\ntype: array\ncredentials:\ndescription: Credentials defines the name of the secret that holds\nthe credentials to connect to the target\ntype: string\ntlsSecret:\ndescription: TLSSecret defines the name of the TLS secret to connect\nto the target if mtls is used\ntype: string\nrequired:\n- connectionProfiles\n- credentials\ntype: object\nperiod:\ndescription: Period defines the wait period between discovery rule\nruns\ntype: string\npodSelector:\ndescription: PodSelector defines the pod selector for which this discovery\nrule applies\nproperties:\nmatchExpressions:\ndescription: matchExpressions is a list of label selector requirements.\nThe requirements are ANDed.\nitems:\ndescription: A label selector requirement is a selector that\ncontains values, a key, and an operator that relates the key\nand values.\nproperties:\nkey:\ndescription: key is the label key that the selector applies\nto.\ntype: string\noperator:\ndescription: operator represents a key's relationship to\na set of values. Valid operators are In, NotIn, Exists\nand DoesNotExist.\ntype: string\nvalues:\ndescription: values is an array of string values. If the\noperator is In or NotIn, the values array must be non-empty.\nIf the operator is Exists or DoesNotExist, the values\narray must be empty. This array is replaced during a strategic\nmerge patch.\nitems:\ntype: string\ntype: array\nrequired:\n- key\n- operator\ntype: object\ntype: array\nmatchLabels:\nadditionalProperties:\ntype: string\ndescription: matchLabels is a map of {key,value} pairs. A single\n{key,value} in the matchLabels map is equivalent to an element\nof matchExpressions, whose key field is \"key\", the operator\nis \"In\", and the values array contains only \"value\". The requirements\nare ANDed.\ntype: object\ntype: object\nx-kubernetes-map-type: atomic\nprefixes:\ndescription: IP Prefixes for which this discovery rule applies\nitems:\nproperties:\nexcludes:\ndescription: IP Prefixes to be excluded\nitems:\ntype: string\ntype: array\nprefix:\ndescription: Prefix of the target/target(s)\ntype: string\nrequired:\n- prefix\ntype: object\ntype: array\nserviceDomain:\ndescription: ServiceDomain defines the service domain of the cluster,\nused by svc discovery to identify the domain name in the k8s cluster\nwhere the service reside.\ntype: string\nserviceSelector:\ndescription: ServiceSelector defines the service selector for which\nthis discovery rule applies\nproperties:\nmatchExpressions:\ndescription: matchExpressions is a list of label selector requirements.\nThe requirements are ANDed.\nitems:\ndescription: A label selector requirement is a selector that\ncontains values, a key, and an operator that relates the key\nand values.\nproperties:\nkey:\ndescription: key is the label key that the selector applies\nto.\ntype: string\noperator:\ndescription: operator represents a key's relationship to\na set of values. Valid operators are In, NotIn, Exists\nand DoesNotExist.\ntype: string\nvalues:\ndescription: values is an array of string values. If the\noperator is In or NotIn, the values array must be non-empty.\nIf the operator is Exists or DoesNotExist, the values\narray must be empty. This array is replaced during a strategic\nmerge patch.\nitems:\ntype: string\ntype: array\nrequired:\n- key\n- operator\ntype: object\ntype: array\nmatchLabels:\nadditionalProperties:\ntype: string\ndescription: matchLabels is a map of {key,value} pairs. A single\n{key,value} in the matchLabels map is equivalent to an element\nof matchExpressions, whose key field is \"key\", the operator\nis \"In\", and the values array contains only \"value\". The requirements\nare ANDed.\ntype: object\ntype: object\nx-kubernetes-map-type: atomic\ntargetConnectionProfiles:\ndescription: TargetConnectionProfiles define the profile the discovery\ncontroller uses to create targets once discovered\nitems:\nproperties:\nconnectionProfile:\ndescription: ConnectionProfile define the profile used to connect\nto the target once discovered\ntype: string\ncredentials:\ndescription: Credentials defines the name of the secret that\nholds the credentials to connect to the target\ntype: string\nsyncProfile:\ndescription: SyncProfile define the profile used to sync to\nthe target config once discovered\ntype: string\ntlsSecret:\ndescription: TLSSecret defines the name of the TLS secret to\nconnect to the target if mtls is used\ntype: string\nrequired:\n- connectionProfile\n- credentials\ntype: object\ntype: array\ntargetTemplate:\ndescription: TargetTemplate defines the template the discovery controller\nuses to create the targets as a result of the discovery\nproperties:\nannotations:\nadditionalProperties:\ntype: string\ndescription: Annotations is a key value map to be copied to the\ntarget CR.\ntype: object\nlabels:\nadditionalProperties:\ntype: string\ndescription: Labels is a key value map to be copied to the target\nCR.\ntype: object\nnameTemplate:\ndescription: target name template\ntype: string\nx-kubernetes-validations:\n- message: nameTemplate is immutable\nrule: self == oldSelf\ntype: object\nrequired:\n- targetConnectionProfiles\ntype: object\nstatus:\ndescription: DiscoveryRuleStatus defines the observed state of DiscoveryRule\nproperties:\nconditions:\ndescription: Conditions of the resource.\nitems:\nproperties:\nlastTransitionTime:\ndescription: lastTransitionTime is the last time the condition\ntransitioned from one status to another. This should be when\nthe underlying condition changed.  If that is not known, then\nusing the time when the API field changed is acceptable.\nformat: date-time\ntype: string\nmessage:\ndescription: message is a human readable message indicating\ndetails about the transition. This may be an empty string.\nmaxLength: 32768\ntype: string\nobservedGeneration:\ndescription: observedGeneration represents the .metadata.generation\nthat the condition was set based upon. For instance, if .metadata.generation\nis currently 12, but the .status.conditions[x].observedGeneration\nis 9, the condition is out of date with respect to the current\nstate of the instance.\nformat: int64\nminimum: 0\ntype: integer\nreason:\ndescription: reason contains a programmatic identifier indicating\nthe reason for the condition's last transition. Producers\nof specific condition types may define expected values and\nmeanings for this field, and whether the values are considered\na guaranteed API. The value should be a CamelCase string.\nThis field may not be empty.\nmaxLength: 1024\nminLength: 1\npattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$\ntype: string\nstatus:\ndescription: status of the condition, one of True, False, Unknown.\nenum:\n- \"True\"\n- \"False\"\n- Unknown\ntype: string\ntype:\ndescription: type of condition in CamelCase or in foo.example.com/CamelCase.\n--- Many .condition.type values are consistent across resources\nlike Available, but because arbitrary conditions can be useful\n(see .node.status.conditions), the ability to deconflict is\nimportant. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)\nmaxLength: 316\npattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$\ntype: string\nrequired:\n- lastTransitionTime\n- message\n- reason\n- status\n- type\ntype: object\ntype: array\nstartTime:\ndescription: StartTime identifies when the dr got started\nformat: date-time\ntype: string\ntype: object\ntype: object\nserved: true\nstorage: true\nsubresources:\nstatus: {}\n---\napiVersion: apiregistration.k8s.io/v1\nkind: APIService\nmetadata:\nname: v1alpha1.config.sdcio.dev\nspec:\ngroup: config.sdcio.dev\ngroupPriorityMinimum: 1000\ninsecureSkipTLSVerify: true\nservice:\nname: config-server\nnamespace: network-system\nport: 6443\nversion: v1alpha1\nversionPriority: 15\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\nlabels:\nsdcio.dev/config-server: \"true\"\nname: config-server\nnamespace: network-system\nspec:\nreplicas: 1\nselector:\nmatchLabels:\nsdcio.dev/config-server: \"true\"\nstrategy:\ntype: Recreate\ntemplate:\nmetadata:\nlabels:\nsdcio.dev/config-server: \"true\"\nsdcio.dev/data-server: \"true\"\nspec:\ncontainers:\n- args:\n- --tls-cert-file=/apiserver.local.config/certificates/tls.crt\n- --tls-private-key-file=/apiserver.local.config/certificates/tls.key\n- --feature-gates=APIPriorityAndFairness=false\n- --audit-log-path=-\n- --audit-log-maxage=0\n- --audit-log-maxbackup=0\n- --secure-port=6443\ncommand:\n- /app/config-server\nenv:\n- name: POD_IP\nvalueFrom:\nfieldRef:\nfieldPath: status.podIP\n- name: POD_NAMESPACE\nvalueFrom:\nfieldRef:\napiVersion: v1\nfieldPath: metadata.namespace\n- name: NODE_NAME\nvalueFrom:\nfieldRef:\napiVersion: v1\nfieldPath: spec.nodeName\n- name: NODE_IP\nvalueFrom:\nfieldRef:\napiVersion: v1\nfieldPath: status.hostIP\n- name: ENABLE_TARGETDATASTORE\nvalue: \"true\"\n- name: ENABLE_TARGETCONFIGSERVER\nvalue: \"true\"\n- name: ENABLE_DISCOVERYRULE\nvalue: \"true\"\n- name: ENABLE_SCHEMA\nvalue: \"true\"\n- name: ENABLE_CONFIG\nvalue: \"true\"\n- name: ENABLE_CONFIGSET\nvalue: \"true\"\nimage: ghcr.io/sdcio/config-server:v0.0.22\nimagePullPolicy: Always\nname: config-server\nports:\n- containerPort: 6443\nname: api-service\nvolumeMounts:\n- mountPath: /apiserver.local.config/certificates\nname: apiserver-certs\nreadOnly: true\n- mountPath: /config\nname: config-store\n- mountPath: /schemas\nname: schema-store\n- args:\n- --config=/config/data-server.yaml\ncommand:\n- /app/data-server\nimage: ghcr.io/sdcio/data-server:v0.0.36\nimagePullPolicy: Always\nname: data-server\nvolumeMounts:\n- mountPath: /config\nname: data-server-config\n- mountPath: /cached/caches\nname: cache\n- mountPath: /schemas\nname: schema-store\n- mountPath: /schemadb\nname: schema-db\nsecurityContext:\nfsGroup: 10000\nrunAsGroup: 10000\nrunAsUser: 10000\nserviceAccountName: config-server\nvolumes:\n- configMap:\nname: data-server\nname: data-server-config\n- name: apiserver-certs\nsecret:\nsecretName: config-server-cert\n- emptyDir:\nsizeLimit: 10Gi\nname: cache\n- name: config-store\npersistentVolumeClaim:\nclaimName: pvc-config-store\n- name: schema-store\npersistentVolumeClaim:\nclaimName: pvc-schema-store\n- name: schema-db\npersistentVolumeClaim:\nclaimName: pvc-schema-db\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\nname: config-server-clusterrole\nrules:\n- apiGroups:\n- \"\"\nresources:\n- namespaces\n- secrets\n- services\n- pods\nverbs:\n- get\n- watch\n- list\n- apiGroups:\n- \"\"\nresources:\n- events\nverbs:\n- create\n- patch\n- apiGroups:\n- admissionregistration.k8s.io\nresources:\n- mutatingwebhookconfigurations\n- validatingwebhookconfigurations\nverbs:\n- get\n- watch\n- list\n- apiGroups:\n- flowcontrol.apiserver.k8s.io\nresources:\n- flowschemas\n- prioritylevelconfigurations\nverbs:\n- get\n- watch\n- list\n- apiGroups:\n- config.sdcio.dev\nresources:\n- configs\n- configs/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- config.sdcio.dev\nresources:\n- configsets\n- configsets/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- config.sdcio.dev\nresources:\n- unmanagedconfigs\n- unmanagedconfigs/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- targets\n- targets/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- targetconnectionprofiles\n- targetsyncprofiles\nverbs:\n- get\n- watch\n- list\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- discoveryrules\n- discoveryrules/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- inv.sdcio.dev\nresources:\n- schemas\n- schemas/status\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n- apiGroups:\n- coordination.k8s.io\nresources:\n- leases\nverbs:\n- get\n- watch\n- list\n- create\n- update\n- patch\n- delete\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\nname: config-server-clusterrolebinding\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: config-server-clusterrole\nsubjects:\n- kind: ServiceAccount\nname: config-server\nnamespace: network-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\nname: config:system:auth-delegator\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: system:auth-delegator\nsubjects:\n- kind: ServiceAccount\nname: config-server\nnamespace: network-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\nname: aggregated-apiserver-role\nnamespace: network-system\nrules:\n- apiGroups:\n- \"\"\nresources:\n- serviceaccounts\nverbs:\n- get\n- apiGroups:\n- \"\"\nresources:\n- serviceaccounts/token\nverbs:\n- create\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\nname: config-server-clusterrolebinding\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: ClusterRole\nname: config-server-clusterrole\nsubjects:\n- kind: ServiceAccount\nname: config-server\nnamespace: network-system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\nname: config-auth-reader\nnamespace: kube-system\nroleRef:\napiGroup: rbac.authorization.k8s.io\nkind: Role\nname: extension-apiserver-authentication-reader\nsubjects:\n- kind: ServiceAccount\nname: config-server\nnamespace: network-system\n---\napiVersion: v1\ndata:\ndata-server.yaml: \"grpc-server:\\n  schema-server:\\n    enabled: true\\n    schemas-directory:\n./schemas\\n\\n  data-server:\\n    max-candidates: 16\\n\\n  max-recv-msg-size: 25165824\n# 24 * 1024 * 1024 (24MB)\\n\\ndatastores: # this specifies MAIN datastores\\n\\nschema-store:\\n\n\\ # type is either memory or persistent (default)\\n  type: persistent\\n  path:\n\\\"/schemadb\\\"\\n\\ncache: \\n  type: local\\n  store-type: badgerdb\\n  dir: \\\"/cached/caches\\\"\\n\\nprometheus:\\n\n\\ address: \\\":56090\\\"\"\nkind: ConfigMap\nmetadata:\nname: data-server\nnamespace: network-system\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: pvc-config-store\nnamespace: network-system\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 2Gi\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: pvc-schema-db\nnamespace: network-system\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 10Gi\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\nname: pvc-schema-store\nnamespace: network-system\nspec:\naccessModes:\n- ReadWriteOnce\nresources:\nrequests:\nstorage: 10Gi\n---\napiVersion: v1\ndata:\ntls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZekNDQWt1Z0F3SUJBZ0lJSC9mSFZHenZ3cnN3RFFZSktvWklodmNOQVFFTEJRQXdaVEVMTUFrR0ExVUUKQmhNQ2RXNHhDekFKQmdOVkJBZ01Bbk4wTVFvd0NBWURWUVFIREFGc01Rb3dDQVlEVlFRS0RBRnZNUXN3Q1FZRApWUVFMREFKdmRURWtNQ0lHQTFVRUF3d2JZbUZ6YVdNdFkyVnlkR2xtYVdOaGRHVXRZWFYwYUc5eWFYUjVNQjRYCkRUSXlNRE16TVRBNU1UYzFNMW9YRFRNeU1ETXlPREE1TVRjMU5Gb3dIREVhTUJnR0ExVUVBeE1SWW1GemFXTXUKWkdWbVlYVnNkQzV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUN0TUt0eApjc3Rjdk8rdDVMazZRQkRBZ3g1akZCL2F1dStVb3BDR2Z6VitaRW5obldpaC8xMVZ2ek44cjhmdGZuUkZGTVZ6CmJqYlVhSXNDOFc1eGJDNXNpc2VrdnVBWDlpanUzMlFybEU0RTR1UzNYREdVZkhGSFhMcWxBRU9RclUvRzQ0RGgKa0I3ajJOcDRzbk9IckF0aDA3TStvbXBmVklhSTlkQmdYY3hsUE5QRkNNamlOb1VweVM4eXNha3RQRXFjZTBpawpmNDBYVERmN1YwekFFelI0QkE4Yzh0b05UMVNnSXFIV0xueERKcnZRempDaTVFN2NMNkpmTmhlZDQ5MUVNWlEwCmVnbkV5bXd6d1Jya3BYTkZ4RHJzSXpOZmhHelB6RGJLdmFIUHh5NUwvM3h3clZ3VHllbklaOVExK0tjemtCSksKRXZIaVVKL1BML0VYZkloakFnTUJBQUdqWURCZU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVQpCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3TFFZRFZSMFJCQ1l3SklJSmJHOWpZV3hvYjNOMGdoRmlZWE5wCll5NWtaV1poZFd4MExuTjJZNGNFZndBQUFUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFEa1hsbGZMTlpzWDEKYmp1b0h4RXVUWitaODlMWUxPUDBMM0dHMFgwdVdkZzJFcXY1bmZNRHVRVmJIRmt5dVo3ZDlDY01QYk12MTdDWgoxZGwwQk1GQTJkTkJzK3V1UXFIUFh3RkI4SFdPSDhBc1pMMnYvbG91T3g2dU1QQk9uWUhuQ3pFY21FQXZoR2dLCkpXMDNkd2QwNlJPeUdLT29qSklFTlRnd0xnQ1dZSytPWmIzQklyMUJqS012Q2dHN3pJVDFUUVNna3hGN1NGNzUKYk5BaEdOa0NWMGVrSnNXQWk1UGhzVS9IdWthdGVHUGNMS3hia0RGdHpSV2tRNmdKUXhkZmVuOVBKTjVJVCt4RQpFci8wYUkrOFM5Y1FPUnk0VTNDSFRodmlnOGFyZ3FucmFWMU92OXZNTWxzZ3pnYXc3SjdaeGtkWWwrSkMyWUcvCjJrUThVd1IzQnc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\ntls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBclRDcmNYTExYTHp2cmVTNU9rQVF3SU1lWXhRZjJycnZsS0tRaG44MWZtUko0WjFvCm9mOWRWYjh6ZksvSDdYNTBSUlRGYzI0MjFHaUxBdkZ1Y1d3dWJJckhwTDdnRi9Zbzd0OWtLNVJPQk9Ma3Qxd3gKbEh4eFIxeTZwUUJEa0sxUHh1T0E0WkFlNDlqYWVMSnpoNndMWWRPelBxSnFYMVNHaVBYUVlGM01aVHpUeFFqSQo0amFGS2Nrdk1yR3BMVHhLbkh0SXBIK05GMHczKzFkTXdCTTBlQVFQSFBMYURVOVVvQ0toMWk1OFF5YTcwTTR3Cm91Uk8zQytpWHpZWG5lUGRSREdVTkhvSnhNcHNNOEVhNUtWelJjUTY3Q016WDRSc3o4dzJ5cjJoejhjdVMvOTgKY0sxY0U4bnB5R2ZVTmZpbk01QVNTaEx4NGxDZnp5L3hGM3lJWXdJREFRQUJBb0lCQUJWWU16ajNLZU1URWdMLwpkbWljYnJRYk5NcUhOMm5Rc2loQ1pNZCt0QXdRdGg1Tk5SRUtGT20xZDlYOUlBbkFGUHBTbGdjazVUTUdjMk40CmQrRVlzUndGZXBkdVF0WVJLM2hOSmQ1TkY5UjRWakhXOWZGVDZPNGZtbzB0WENaZmhiNkFXV2p6Unl0VGxaRmMKaE9xS3BKaDQ2OVZqVlBMTXl3dmtKN3RJdENFaHl4b0t0VVhwcm45SXBLNnNUa051OTFmMVA4czJNbDd1RlVqYwpJdGhMb3JnMEYyU3RaeEJmVDJGaFRYaFZxRlRJS1pmazFGbnRpbUwyWlQrRXZzQlpnZHYwa2Z1Q2hFdE5jRW1PCnRZc2dKT3ExTWF5M2d0dlk3VDB6WkRtTTIrOVpKQ0JLcm8yV2IxdGw0RHNnaWNkR0I2SlhnTi81aklSMTNmbDUKMTRJd1hza0NnWUVBemtQb1MrTko0QkJkR3RYem5tZWVhRFFQVVU0dkF1R3YyU2VtajR3RG1KRXB6aDdoMWlQZAprVWxmYjcxZ1VMbmk0SDVkVFlyVFpwOElUaXZvM3A1bUNrV3lFV09wMmx4VUZoM3JnVWN6NWt0RUhkejl1bjNoCnFYNVJpTWlkM0Y3dWRIODdqYTdJVi9mUEFGSnlremQrWHNaZGFuT0tPK1UvV0t2ek0rSFEzUThDZ1lFQTF2TWoKdml3dnFxM0FBa0VpN2RlOUxLUE1uS1N5VE9BdHQzS2dqV1RLNU5aQUdqeWpoSGxEbjRCempSS25DWk8xY0lJZwo0Wnl1VzQrUlB5aGQreEFubzVoMVh0Ny9LYzNFaW1ucjBLU0ZmRWVza2NORFIyVHNTdCtjYTl6aFFPTFJ0TWRCCnE5OWZDeFprK1pmcEhpSzJCK0pHVExNdVJRY0tDYU43RldKTkIyMENnWUJhc2k5bGx3WjMySm9uMzZYa3BDbGEKSm5JSnpUZ01xMUlZU1VBSzVJVDhRL0ErNndOZ2xwcXBkTHJiTmtrd2xkdjEzSHFJU3gvVGd1QXpCMG01QWF0YQpudlRDZ3JGQUM5TUplcFNBWHQrcVJyUW44WEU3M0hncWdCbTM3SWJGVEpUTGN0cXIzUXZJNm5VQjdqN2xEc1NwClJjM3pyZVE5bS9yenNZQVo4eFJVN3dLQmdRQ0JYTjg4Q3JlOVRzaHFFdTJFbXZ4ZEswOXZUcWVJSUxzaTFyZk4Kb01XREozWjQwOW5OVm5YZVBwNU1YdGRzcWhyZVZWS1l0WVV4MFp1bW1STEdrSmhxbXN5NGhoaW0vaEcxQTc1SwpXVm1FekZZTmU2aTRCUU00cEk4dFUwZTFsMHlDTWhGUjhTTHdOMUFaN3RUN3NBUkJobXFzcW9IRVJWSkRMc0phCndraDltUUtCZ0NYR2xoZzY4aVMzMldmSWVtYUFRMTJpNFRUUk1FNWppTFl0ZlkyREJTMDBWV3NxY0l1OEFUWm0KVHVoZHBRVG9mKzE3LzFyU0cyYnFaWFA2L0h3ak14OTVIdWlXbjVKSjA3RTduOUVCUDlkQTY0K0lHdWlvd0h5RAo2a3g3VVhuTUtTYXdiV2JxZ1JGZTFOZEdLbkh0ZE5GOGxndEdjdytxUTk3YkIreXFreXMxCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nkind: Secret\nmetadata:\nlabels:\nsdcio.dev/config-server: \"true\"\nname: config-server-cert\nnamespace: network-system\ntype: kubernetes.io/tls\n---\napiVersion: v1\nkind: Service\nmetadata:\nlabels:\nsdcio.dev/config-server: \"true\"\nname: config-server\nnamespace: network-system\nspec:\nports:\n- name: api-service\nport: 6443\ntargetPort: api-service\nselector:\nsdcio.dev/config-server: \"true\"\n---\napiVersion: v1\nkind: Service\nmetadata:\nlabels:\nsdcio.dev/config-server: \"true\"\nname: data-server\nnamespace: network-system\nspec:\nports:\n- port: 56000\nprotocol: TCP\ntargetPort: 56000\nselector:\nsdcio.dev/data-server: \"true\"\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\nname: config-server\nnamespace: network-system\n</code></pre> <p>if successfull you should see a running container similar to this</p> <pre><code>kubectl get pods -n network-system\n</code></pre> <p>output</p> <pre><code>NAME                                READY   STATUS    RESTARTS        AGE\nconfig-apiserver-5d56bf5776-kktst   2/2     Running   1 (6m49s ago)   6m55s\n</code></pre>"},{"location":"install/4_k8s_distributed/","title":"Kubernetes-distributed","text":"<p>First ensure the pre-requisites are met</p>"},{"location":"install/4_k8s_distributed/#install-sdc-components","title":"Install SDC Components","text":"<p>Under construction</p>"},{"location":"system-architecture/config-server/","title":"Config server system architecture","text":"<p>The config-server comprises 6 essential components:</p> <ul> <li><code>Schema Reconciler</code>: Manages the lifecycle of a <code>yang</code> schema via the <code>schema</code> Custom Resource Definition (CRD).</li> <li><code>DiscoveryRule Reconciler</code>: Oversees the lifecycle of the <code>discoveryRule</code> CRD.</li> <li><code>TargetDatastore Reconciler</code>: Controls the lifecycle of the <code>datastore</code> within the data-server.</li> <li><code>TargetConfigServer Reconciler</code>: Orchestrates the lifecycle of the <code>config</code> KRM resource in response to target state changes.</li> <li><code>TargetConfigSet Server Reconciler</code>: Orchestrates the lifecycle of the <code>configSet</code> KRM resource in response to target state changes.</li> <li><code>Config Server</code>: Coordinates the lifecycle of the <code>config</code> and <code>configSet</code> KRM resources in the data-server</li> </ul>"},{"location":"system-architecture/config-server/#schema-reconciler","title":"Schema Reconciler","text":"<p>The Schema Reconciler is tasked with managing <code>yang</code> schemas in the schema-server through the <code>schema</code> CRD. This reconciler handles the addition and deletion of <code>yang</code> schemas. Notably, the schema CRD remains immutable to simplify updates. It assumes that yang schemas are validated offline before integration into the system. Upon adding a <code>schema</code> CR, the reconciler downloads the referenced git repository, extracts the referenced Schema files and loads the Schema into the schema-server. Deleting a schema CR results in the deletion of the corresponding schema from the schema-server. The reconciler employs the <code>READY</code> condition to signal the reconciliation status of the <code>schema</code> CR.</p>"},{"location":"system-architecture/config-server/#discovery-reconciler","title":"Discovery Reconciler","text":"<p>The Discovery Reconciler is responsible for managing the lifecycle of the <code>discoveryRule</code> CRD. It monitors the availability and alterations of referenced profiles in the <code>discoveryRule</code> CR. Additionally, it initiates or halts a discovery goroutine for each <code>discoveryRule</code> CR, regardless of whether discovery is <code>enabled</code> or <code>disabled</code>. Based on the discovery outcomes, it manages the lifecycle of the respective <code>target</code> CR. A successful discovery results in the creation of a <code>target</code> CR with a <code>READY</code> condition set to <code>True</code>.</p>"},{"location":"system-architecture/config-server/#targetdatastore-reconciler","title":"TargetDatastore Reconciler","text":"<p>The TargetDatastore Reconciler oversees the lifecycle of the datastore of a target within the <code>Data-Server</code>. It creates or deletes a datastore in the <code>Data-Server</code> based on updates to the <code>target</code> CR or changes in the target state within the datastore. Its status is reflected in the <code>DATASTORE</code> condition (<code>DSReady</code> in yaml / json) of the <code>target</code> CR and should be <code>READY</code> in case of normal operation.</p>"},{"location":"system-architecture/config-server/#targetconfigserver-reconciler","title":"TargetConfigServer Reconciler","text":"<p>The TargetConfigServer Reconciler manages the lifecycle of the <code>config</code> KRM resources based on <code>target</code> transitions. To ensure consistent results when a target transitions from <code>NotReady</code> to <code>Ready</code>, it reapplies the original configurations before handling new ones. Consequently, the reconciler reapplies previously applied configs, and upon successful completion, declares the <code>CONFIG</code> condition (<code>ConfigReady</code> in json / yaml output) state with reason <code>Ready</code> as <code>True</code> in the <code>target</code> CR .</p>"},{"location":"system-architecture/config-server/#targetconfigsetserver-reconciler","title":"TargetConfigSetServer Reconciler","text":"<p>The TargetConfigSetServer Reconciler oversees the lifecycle of the <code>configSet</code> KRM resources based on <code>target</code> transitions. It updates the status of the <code>configSet</code> KRM resource when a <code>target</code> CR changes state.</p>"},{"location":"system-architecture/config-server/#config-resources","title":"Config Resources","text":"<p>The Config resources are implemented as an aggregated API server, as Config resources may exceed the constraints of the etcd storage limits. It manages the <code>config</code> and <code>configSet</code> KRM resources based on the <code>target</code> <code>READY</code> conditions and communicates with the data-server through the intent RPC(s).</p>"},{"location":"user-guide/introduction/","title":"Introduction","text":"<p>Thank you for using the schema driven configuration tool. This user guide has been crafted to assist you with instructions, tips, and insights to ensure a seamless experience.</p>"},{"location":"user-guide/troubleshooting/","title":"Troubleshooting","text":"<p>This section contains information on how to troubleshoot an SDCIO instance that is causing some trouble.</p>"},{"location":"user-guide/troubleshooting/#config-server","title":"Config-Server","text":"<p>The Config-Server provides the extension kubernetes apiserver and can therefor be mainly throubleshooted via <code>kubectl</code>.</p>"},{"location":"user-guide/troubleshooting/#api-registration","title":"API Registration","text":"<p>The Config-Server hooks in to the kubernetes apiserver by registering its APIs. If the apiregistration does not show up as AVAILABLE == True, then further investigation is required. <pre><code>kubectl get apiservices.apiregistration.k8s.io | grep \"sdcio.dev\\|NAME\"\n</code></pre></p> <p>The two services should be available. <pre><code>NAME                                   SERVICE                        AVAILABLE   AGE\nv1alpha1.config.sdcio.dev              network-system/config-server   True        6d\nv1alpha1.inv.sdcio.dev                 Local                          True        6d\n</code></pre></p>"},{"location":"user-guide/troubleshooting/#deployment","title":"Deployment","text":"<p>The Config-Server is deployed in the network-system namespace via a Deployment.  Check for it to be READY. If it is not ready follow the basic troubleshooting for Deployments.</p> <p><pre><code>kubectl get -n network-system deployments.apps config-server\n</code></pre> There should be a config-server in the Ready state. <pre><code>NAME            READY   UP-TO-DATE   AVAILABLE   AGE\nconfig-server   1/1     1            1           6d\n</code></pre></p>"},{"location":"user-guide/troubleshooting/#service","title":"Service","text":"<p>For the APIServer a Service is referenced, this reference must resolve to the config-server. Via the Endpoints the association to the pod can be verified. <pre><code>kubectl get -n network-system endpoints config-server -o yaml\n</code></pre></p> <p>The Subsets addresses must list the config-server pod. <pre><code>apiVersion: v1\nkind: Endpoints\nmetadata:\nannotations:\nendpoints.kubernetes.io/last-change-trigger-time: \"2024-02-09T13:13:34Z\"\ncreationTimestamp: \"2024-02-09T13:13:34Z\"\nlabels:\nsdcio.dev/config-server: \"true\"\nname: config-server\nnamespace: network-system\nresourceVersion: \"439928\"\nuid: 8f849512-6021-4c7e-a08b-c3cff25ed68b\nsubsets:\n- addresses:\n- ip: 10.244.0.8\nnodeName: api-server-control-plane\ntargetRef:\nkind: Pod\nname: config-server-84465fd854-bm258\nnamespace: network-system\nuid: b6986782-4055-431a-9742-f074d88febb5\nports:\n- port: 6443\nprotocol: TCP\n</code></pre></p>"},{"location":"user-guide/troubleshooting/#sdctl","title":"SDCTL","text":"<p>sdctl is a binary available for gRPC interaction with the schema-server, data-server and cache. In a kubernetes environment, it can be launched by executing a container image.</p> <pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:v0.0.4 --restart=Never --command -- /bin/bash\n</code></pre>"},{"location":"user-guide/troubleshooting/#schema-server","title":"Schema-Server","text":"<pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:v0.0.4 --restart=Never --command -- /app/sdctl -a data-server.network-system.svc.cluster.local:56000 schema list\n</code></pre> schema list <pre><code>request:\n\nresponse:\n+------+----------------------+---------+\n| Name |        Vendor        | Version |\n+------+----------------------+---------+\n|      | srl.nokia.sdcio.dev  | 23.10.1 |\n|      | sros.nokia.sdcio.dev | 23.10.2 |\n+------+----------------------+---------+\npod \"sdctl\" deleted\n</code></pre> <pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:v0.0.4 --restart=Never --command -- /app/sdctl -a data-server.network-system.svc.cluster.local:56000 schema get --vendor sros.nokia.sdcio.dev --version 23.10.2 --path /configure\n</code></pre> schema get <pre><code>sdctl:/app$ /app/sdctl -a data-server.network-system.svc.cluster.local:56000 schema get --vendor sros.nokia.sdcio.dev --version 23.10.2 --path /configure\nrequest:\npath: {\n  elem: {\n    name: \"configure\"\n  }\n}\nschema: {\n  vendor: \"sros.nokia.sdcio.dev\"\n  version: \"23.10.2\"\n}\n\nresponse:\nschema: {\n  container: {\n    name: \"configure\"\n    description: \"Configure system configuration\"\n    namespace: \"urn:nokia.com:sros:ns:yang:sr:conf\"\n    prefix: \"conf\"\n    leaflists: {\n      name: \"apply-groups\"\n      description: \"Apply a configuration group at this level\"\n      namespace: \"urn:nokia.com:sros:ns:yang:sr:conf\"\n      prefix: \"conf\"\n      type: {\n        type: \"leafref\"\n        type_name: \"leafref\"\n        leafref: \"../groups/group/name\"\n      }\n      max_elements: 8\n      is_user_ordered: true\n    }\n    children: \"aaa\"\n    children: \"anysec\"\n    children: \"application-assurance\"\n    children: \"aps\"\n    children: \"bfd\"\n    children: \"bmp\"\n    children: \"call-trace\"\n    children: \"card\"\n    children: \"cflowd\"\n    children: \"chassis\"\n    children: \"connection-profile\"\n    children: \"esa\"\n    children: \"eth-cfm\"\n    children: \"eth-ring\"\n    children: \"filter\"\n    children: \"fwd-path-ext\"\n    children: \"group-encryption\"\n    children: \"groups\"\n    children: \"ipsec\"\n    children: \"isa\"\n    children: \"lag\"\n    children: \"log\"\n    children: \"macsec\"\n    children: \"mcac\"\n    children: \"mirror\"\n    children: \"multicast-management\"\n    children: \"oam-pm\"\n    children: \"openflow\"\n    children: \"policy-options\"\n    children: \"port\"\n    children: \"port-policy\"\n    children: \"port-xc\"\n    children: \"pw-port\"\n    children: \"python\"\n    children: \"qos\"\n    children: \"redundancy\"\n    children: \"router\"\n    children: \"routing-options\"\n    children: \"saa\"\n    children: \"satellite\"\n    children: \"service\"\n    children: \"sfm\"\n    children: \"subscriber-mgmt\"\n    children: \"system\"\n    children: \"test-oam\"\n    children: \"vrrp\"\n  }\n}\n\nsdctl:/app$\n</code></pre> schema get 2 <pre><code>sdctl:/app$ /app/sdctl -a data-server.network-system.svc.cluster.local:56000 schema get --vendor srl.nokia.sdcio.dev --version 23.10.1 --path /srl_nokia-interfaces\nrequest:\npath: {\n  elem: {\n    name: \"srl_nokia-interfaces\"\n  }\n}\nschema: {\n  vendor: \"srl.nokia.sdcio.dev\"\n  version: \"23.10.1\"\n}\n\nresponse:\nschema: {\n  container: {\n    name: \"srl_nokia-interfaces\"\n    description: \"Model for managing network interfaces and subinterfaces.\\n\\nThis model reuses data items defined in the IETF YANG model for\\ninterfaces described by RFC 7223\"\n    namespace: \"urn:srl_nokia/interfaces\"\n    prefix: \"srl_nokia-if\"\n    children: \"interface\"\n  }\n}\n</code></pre>"},{"location":"user-guide/troubleshooting/#data-server","title":"Data-Server","text":"<p>Listing data-stores <pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:v0.0.4 --restart=Never --command -- /app/sdctl -a data-server.network-system.svc.cluster.local:56000 datastore list\n</code></pre></p> datastore list <pre><code>datastores: {\n  name: \"default.dev1\"\n  datastore: {\n    name: \"default.dev1\"\n  }\n  schema: {\n    vendor: \"srl.nokia.sdcio.dev\"\n    version: \"23.10.1\"\n  }\n  target: {\n    type: \"gnmi\"\n    address: \"172.18.0.4:57400\"\n  }\n}\ndatastores: {\n  name: \"default.sr1\"\n  datastore: {\n    name: \"default.sr1\"\n  }\n  schema: {\n    vendor: \"sros.nokia.sdcio.dev\"\n    version: \"23.10.2\"\n  }\n  target: {\n    type: \"netconf\"\n    address: \"172.22.1.11:830\"\n    status: CONNECTED\n  }\n}\ndatastores: {\n  name: \"default.dev2\"\n  datastore: {\n    name: \"default.dev2\"\n  }\n  schema: {\n    vendor: \"srl.nokia.sdcio.dev\"\n    version: \"23.10.1\"\n  }\n  target: {\n    type: \"gnmi\"\n    address: \"172.18.0.3:57400\"\n  }\n}\ndatastores: {\n  name: \"default.sr2\"\n  datastore: {\n    name: \"default.sr2\"\n  }\n  schema: {\n    vendor: \"sros.nokia.sdcio.dev\"\n    version: \"23.10.2\"\n  }\n  target: {\n    type: \"netconf\"\n    address: \"172.22.1.12:830\"\n    status: CONNECTED\n  }\n}\n\npod \"sdctl\" deleted\n</code></pre> <p>Fetching config from the data-store <pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:v0.0.4 --restart=Never --command -- /app/sdctl -a data-server.network-system.svc.cluster.local:56000 data get --ds default.sr1 --path /configure/service\n</code></pre></p> data get <pre><code>request:\nname: \"default.sr1\"\npath: {\n  elem: {\n    name: \"configure\"\n  }\n  elem: {\n    name: \"service\"\n  }\n}\n\nnotification: {\n  timestamp: 1708694690324217499\n  update: {\n    path: {\n      elem: {\n        name: \"configure\"\n      }\n      elem: {\n        name: \"service\"\n      }\n      elem: {\n        name: \"vprn\"\n        key: {\n          key: \"service-name\"\n          value: \"vprn123\"\n        }\n      }\n      elem: {\n        name: \"admin-state\"\n      }\n    }\n    value: {\n      string_val: \"enable\"\n    }\n  }\n}\n\nnotification: {\n  timestamp: 1708694690324355878\n  update: {\n    path: {\n      elem: {\n        name: \"configure\"\n      }\n      elem: {\n        name: \"service\"\n      }\n      elem: {\n        name: \"vprn\"\n        key: {\n          key: \"service-name\"\n          value: \"vprn123\"\n        }\n      }\n      elem: {\n        name: \"customer\"\n      }\n    }\n    value: {\n      string_val: \"1\"\n    }\n  }\n}\n\nnotification: {\n  timestamp: 1708694690324481720\n  update: {\n    path: {\n      elem: {\n        name: \"configure\"\n      }\n      elem: {\n        name: \"service\"\n      }\n      elem: {\n        name: \"vprn\"\n        key: {\n          key: \"service-name\"\n          value: \"vprn123\"\n        }\n      }\n      elem: {\n        name: \"service-id\"\n      }\n    }\n    value: {\n      uint_val: 101\n    }\n  }\n}\n\nnotification: {\n  timestamp: 1708694690324648209\n  update: {\n    path: {\n      elem: {\n        name: \"configure\"\n      }\n      elem: {\n        name: \"service\"\n      }\n      elem: {\n        name: \"vprn\"\n        key: {\n          key: \"service-name\"\n          value: \"vprn123\"\n        }\n      }\n      elem: {\n        name: \"service-name\"\n      }\n    }\n    value: {\n      string_val: \"vprn123\"\n    }\n  }\n}\n</code></pre>"},{"location":"user-guide/troubleshooting.tmpl/","title":"Troubleshooting","text":"<p>This section contains information on how to troubleshoot an SDCIO instance that is causing some trouble.</p>"},{"location":"user-guide/troubleshooting.tmpl/#config-server","title":"Config-Server","text":"<p>The Config-Server provides the extension kubernetes apiserver and can therefor be mainly throubleshooted via <code>kubectl</code>.</p>"},{"location":"user-guide/troubleshooting.tmpl/#api-registration","title":"API Registration","text":"<p>The Config-Server hooks in to the kubernetes apiserver by registering its APIs. If the apiregistration does not show up as AVAILABLE == True, then further investigation is required. <pre><code>kubectl get apiservices.apiregistration.k8s.io | grep \"sdcio.dev\\|NAME\"\n</code></pre></p> <p>The two services should be available. <pre><code>NAME                                   SERVICE                        AVAILABLE   AGE\nv1alpha1.config.sdcio.dev              network-system/config-server   True        6d\nv1alpha1.inv.sdcio.dev                 Local                          True        6d\n</code></pre></p>"},{"location":"user-guide/troubleshooting.tmpl/#deployment","title":"Deployment","text":"<p>The Config-Server is deployed in the network-system namespace via a Deployment.  Check for it to be READY. If it is not ready follow the basic troubleshooting for Deployments.</p> <p><pre><code>kubectl get -n network-system deployments.apps config-server\n</code></pre> There should be a config-server in the Ready state. <pre><code>NAME            READY   UP-TO-DATE   AVAILABLE   AGE\nconfig-server   1/1     1            1           6d\n</code></pre></p>"},{"location":"user-guide/troubleshooting.tmpl/#service","title":"Service","text":"<p>For the APIServer a Service is referenced, this reference must resolve to the config-server. Via the Endpoints the association to the pod can be verified. <pre><code>kubectl get -n network-system endpoints config-server -o yaml\n</code></pre></p> <p>The Subsets addresses must list the config-server pod. <pre><code>apiVersion: v1\nkind: Endpoints\nmetadata:\nannotations:\nendpoints.kubernetes.io/last-change-trigger-time: \"2024-02-09T13:13:34Z\"\ncreationTimestamp: \"2024-02-09T13:13:34Z\"\nlabels:\nsdcio.dev/config-server: \"true\"\nname: config-server\nnamespace: network-system\nresourceVersion: \"439928\"\nuid: 8f849512-6021-4c7e-a08b-c3cff25ed68b\nsubsets:\n- addresses:\n- ip: 10.244.0.8\nnodeName: api-server-control-plane\ntargetRef:\nkind: Pod\nname: config-server-84465fd854-bm258\nnamespace: network-system\nuid: b6986782-4055-431a-9742-f074d88febb5\nports:\n- port: 6443\nprotocol: TCP\n</code></pre></p>"},{"location":"user-guide/troubleshooting.tmpl/#sdctl","title":"SDCTL","text":"<p>sdctl is a binary available for gRPC interaction with the schema-server, data-server and cache. In a kubernetes environment, it can be launched by executing a container image.</p> <pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:${SDCTL_VERSION} --restart=Never --command -- /bin/bash\n</code></pre>"},{"location":"user-guide/troubleshooting.tmpl/#schema-server","title":"Schema-Server","text":"<pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:${SDCTL_VERSION} --restart=Never --command -- /app/sdctl -a data-server.network-system.svc.cluster.local:56000 schema list\n</code></pre> schema list <pre><code>request:\n\nresponse:\n+------+----------------------+---------+\n| Name |        Vendor        | Version |\n+------+----------------------+---------+\n|      | srl.nokia.sdcio.dev  | 23.10.1 |\n|      | sros.nokia.sdcio.dev | 23.10.2 |\n+------+----------------------+---------+\npod \"sdctl\" deleted\n</code></pre> <pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:${SDCTL_VERSION} --restart=Never --command -- /app/sdctl -a data-server.network-system.svc.cluster.local:56000 schema get --vendor sros.nokia.sdcio.dev --version 23.10.2 --path /configure\n</code></pre> schema get <pre><code>sdctl:/app$ /app/sdctl -a data-server.network-system.svc.cluster.local:56000 schema get --vendor sros.nokia.sdcio.dev --version 23.10.2 --path /configure\nrequest:\npath: {\n  elem: {\n    name: \"configure\"\n  }\n}\nschema: {\n  vendor: \"sros.nokia.sdcio.dev\"\n  version: \"23.10.2\"\n}\n\nresponse:\nschema: {\n  container: {\n    name: \"configure\"\n    description: \"Configure system configuration\"\n    namespace: \"urn:nokia.com:sros:ns:yang:sr:conf\"\n    prefix: \"conf\"\n    leaflists: {\n      name: \"apply-groups\"\n      description: \"Apply a configuration group at this level\"\n      namespace: \"urn:nokia.com:sros:ns:yang:sr:conf\"\n      prefix: \"conf\"\n      type: {\n        type: \"leafref\"\n        type_name: \"leafref\"\n        leafref: \"../groups/group/name\"\n      }\n      max_elements: 8\n      is_user_ordered: true\n    }\n    children: \"aaa\"\n    children: \"anysec\"\n    children: \"application-assurance\"\n    children: \"aps\"\n    children: \"bfd\"\n    children: \"bmp\"\n    children: \"call-trace\"\n    children: \"card\"\n    children: \"cflowd\"\n    children: \"chassis\"\n    children: \"connection-profile\"\n    children: \"esa\"\n    children: \"eth-cfm\"\n    children: \"eth-ring\"\n    children: \"filter\"\n    children: \"fwd-path-ext\"\n    children: \"group-encryption\"\n    children: \"groups\"\n    children: \"ipsec\"\n    children: \"isa\"\n    children: \"lag\"\n    children: \"log\"\n    children: \"macsec\"\n    children: \"mcac\"\n    children: \"mirror\"\n    children: \"multicast-management\"\n    children: \"oam-pm\"\n    children: \"openflow\"\n    children: \"policy-options\"\n    children: \"port\"\n    children: \"port-policy\"\n    children: \"port-xc\"\n    children: \"pw-port\"\n    children: \"python\"\n    children: \"qos\"\n    children: \"redundancy\"\n    children: \"router\"\n    children: \"routing-options\"\n    children: \"saa\"\n    children: \"satellite\"\n    children: \"service\"\n    children: \"sfm\"\n    children: \"subscriber-mgmt\"\n    children: \"system\"\n    children: \"test-oam\"\n    children: \"vrrp\"\n  }\n}\n\nsdctl:/app$\n</code></pre> schema get 2 <pre><code>sdctl:/app$ /app/sdctl -a data-server.network-system.svc.cluster.local:56000 schema get --vendor srl.nokia.sdcio.dev --version 23.10.1 --path /srl_nokia-interfaces\nrequest:\npath: {\n  elem: {\n    name: \"srl_nokia-interfaces\"\n  }\n}\nschema: {\n  vendor: \"srl.nokia.sdcio.dev\"\n  version: \"23.10.1\"\n}\n\nresponse:\nschema: {\n  container: {\n    name: \"srl_nokia-interfaces\"\n    description: \"Model for managing network interfaces and subinterfaces.\\n\\nThis model reuses data items defined in the IETF YANG model for\\ninterfaces described by RFC 7223\"\n    namespace: \"urn:srl_nokia/interfaces\"\n    prefix: \"srl_nokia-if\"\n    children: \"interface\"\n  }\n}\n</code></pre>"},{"location":"user-guide/troubleshooting.tmpl/#data-server","title":"Data-Server","text":"<p>Listing data-stores <pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:${SDCTL_VERSION} --restart=Never --command -- /app/sdctl -a data-server.network-system.svc.cluster.local:56000 datastore list\n</code></pre></p> datastore list <pre><code>datastores: {\n  name: \"default.dev1\"\n  datastore: {\n    name: \"default.dev1\"\n  }\n  schema: {\n    vendor: \"srl.nokia.sdcio.dev\"\n    version: \"23.10.1\"\n  }\n  target: {\n    type: \"gnmi\"\n    address: \"172.18.0.4:57400\"\n  }\n}\ndatastores: {\n  name: \"default.sr1\"\n  datastore: {\n    name: \"default.sr1\"\n  }\n  schema: {\n    vendor: \"sros.nokia.sdcio.dev\"\n    version: \"23.10.2\"\n  }\n  target: {\n    type: \"netconf\"\n    address: \"172.22.1.11:830\"\n    status: CONNECTED\n  }\n}\ndatastores: {\n  name: \"default.dev2\"\n  datastore: {\n    name: \"default.dev2\"\n  }\n  schema: {\n    vendor: \"srl.nokia.sdcio.dev\"\n    version: \"23.10.1\"\n  }\n  target: {\n    type: \"gnmi\"\n    address: \"172.18.0.3:57400\"\n  }\n}\ndatastores: {\n  name: \"default.sr2\"\n  datastore: {\n    name: \"default.sr2\"\n  }\n  schema: {\n    vendor: \"sros.nokia.sdcio.dev\"\n    version: \"23.10.2\"\n  }\n  target: {\n    type: \"netconf\"\n    address: \"172.22.1.12:830\"\n    status: CONNECTED\n  }\n}\n\npod \"sdctl\" deleted\n</code></pre> <p>Fetching config from the data-store <pre><code>kubectl run -ti --rm sdctl --image=ghcr.io/sdcio/sdctl:${SDCTL_VERSION} --restart=Never --command -- /app/sdctl -a data-server.network-system.svc.cluster.local:56000 data get --ds default.sr1 --path /configure/service\n</code></pre></p> data get <pre><code>request:\nname: \"default.sr1\"\npath: {\n  elem: {\n    name: \"configure\"\n  }\n  elem: {\n    name: \"service\"\n  }\n}\n\nnotification: {\n  timestamp: 1708694690324217499\n  update: {\n    path: {\n      elem: {\n        name: \"configure\"\n      }\n      elem: {\n        name: \"service\"\n      }\n      elem: {\n        name: \"vprn\"\n        key: {\n          key: \"service-name\"\n          value: \"vprn123\"\n        }\n      }\n      elem: {\n        name: \"admin-state\"\n      }\n    }\n    value: {\n      string_val: \"enable\"\n    }\n  }\n}\n\nnotification: {\n  timestamp: 1708694690324355878\n  update: {\n    path: {\n      elem: {\n        name: \"configure\"\n      }\n      elem: {\n        name: \"service\"\n      }\n      elem: {\n        name: \"vprn\"\n        key: {\n          key: \"service-name\"\n          value: \"vprn123\"\n        }\n      }\n      elem: {\n        name: \"customer\"\n      }\n    }\n    value: {\n      string_val: \"1\"\n    }\n  }\n}\n\nnotification: {\n  timestamp: 1708694690324481720\n  update: {\n    path: {\n      elem: {\n        name: \"configure\"\n      }\n      elem: {\n        name: \"service\"\n      }\n      elem: {\n        name: \"vprn\"\n        key: {\n          key: \"service-name\"\n          value: \"vprn123\"\n        }\n      }\n      elem: {\n        name: \"service-id\"\n      }\n    }\n    value: {\n      uint_val: 101\n    }\n  }\n}\n\nnotification: {\n  timestamp: 1708694690324648209\n  update: {\n    path: {\n      elem: {\n        name: \"configure\"\n      }\n      elem: {\n        name: \"service\"\n      }\n      elem: {\n        name: \"vprn\"\n        key: {\n          key: \"service-name\"\n          value: \"vprn123\"\n        }\n      }\n      elem: {\n        name: \"service-name\"\n      }\n    }\n    value: {\n      string_val: \"vprn123\"\n    }\n  }\n}\n</code></pre>"},{"location":"user-guide/configuration/schemas/","title":"Schema","text":"<p>The initial step in integrating a device with SDC involves importing the device's schema. SDC is equipped to handle YANG schemas, provided all necessary model files and their respective dependencies are available in a git repository. This process is facilitated through the Schema CustomResource, detailed here.</p> <p>The Schema CustomResource is configured using three main parameter groups:</p> <ol> <li>Source of Schema: Determined by <code>repoURL</code>, <code>kind</code>, and <code>ref</code> parameters.</li> <li>Schema Identification: Specified using <code>provider</code> and <code>version</code> parameters.</li> <li>Schema Parsing Method: Configured through <code>models</code>, <code>includes</code>, and <code>excludes</code> parameters.</li> </ol>"},{"location":"user-guide/configuration/schemas/#source-of-schema-repository-configuration","title":"Source of Schema: Repository Configuration","text":"<p>To successfully retrieve the schema, it is essential for users to provide four key parameters: <code>repoURL</code>, <code>kind</code>, <code>ref</code> and <code>credentials</code>. These parameters jointly establish the methodology for schema acquisition:</p> <ul> <li><code>repoURL</code>: This parameter is pivotal as it specifies the repository's URL where the schema is located.</li> <li><code>kind</code>: It determines the nature of the reference point within the repository, offering options between a \"tag\" or a \"branch\".</li> <li><code>ref</code>: This parameter is closely linked to kind and pinpoints the exact tag or branch name within the repository.</li> <li><code>credentials</code>: This parameter is point to a secret name in the same namespace as the <code>schema</code> CR. It is required if your repository requires authentication e.g. a private repo.</li> </ul> <p>Following the identification of schema directories and files for download, the <code>dirs</code> attribute plays a crucial role. It allows users to map each source directory to a corresponding local storage location. Essentially, dirs is an array comprising pairs of <code>src</code> (source directory) and <code>dst</code> (destination path). This setup facilitates the organization of downloaded schema files, ensuring they are stored in designated local directories for easy access and management.</p> <p>If the dirs attribute is not set, it defaults to <code>$pwd</code> for both <code>src</code> and <code>dst</code>.</p>"},{"location":"user-guide/configuration/schemas/#repository-authentication","title":"Repository authentication","text":"<p>If your schema repository requires authentication a secret of type <code>kubernetes.io/basic-auth</code> is referenced in the schema CR. An Example of such secret is provided below.</p> <p>username/password</p> <p>Please fill out your own username and password/token</p> <p>namespace</p> <p>The secret MUST use the same namespace as the schema CR that is referencing it.</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\nname: personal-access-token\ndata:\nusername: &lt;base64-encoded-username&gt;\npassword: &lt;base64-encoded-password&gt;\ntype: kubernetes.io/basic-auth\n</code></pre>"},{"location":"user-guide/configuration/schemas/#schema-identification-naming-conventions","title":"Schema Identification: Naming Conventions","text":"<p>The schema is uniquely identified through <code>provider</code> and <code>version</code>.</p> <ul> <li><code>provider</code>: Contains details about the schema issuer, typically including vendor and chassis type.</li> <li><code>version</code>: Represents the specific version of the schema.</li> </ul>"},{"location":"user-guide/configuration/schemas/#schema-parsing-method-handling-yang-models","title":"Schema Parsing Method: Handling YANG Models","text":"<p>YANG schemas are comprised of several implemented models, some of which may have dependencies on other models. The `Schema`` CustomResource accommodates this complexity with specific parameters:</p> <ul> <li><code>models</code>: Defines paths to files or directories containing the models implemented by the schema.</li> <li><code>includes</code>: Specifies paths to models that are imported as dependencies by the implemented models.</li> <li><code>excludes</code>: An optional list of regular expression parameters. It filters out specific models during the loading process based on matching criteria.</li> </ul> <p>By carefully setting these parameters, users can seamlessly onboard devices into the SDC framework, ensuring that the schemas are accurately loaded and parsed.</p>"},{"location":"user-guide/configuration/schemas/#examples","title":"Examples","text":""},{"location":"user-guide/configuration/schemas/#sr-linux-v23101","title":"SR Linux v23.10.1","text":"<p>The below CR defines an SR Linux <code>Schema</code> version 23.10.1.</p> <p>The YANG files will be retrieved from the github repo <code>https://github.com/nokia/srlinux-yang-models</code> tag <code>v23.10.1</code>. The remote directory <code>srlinux-yang-models</code> at the roo level of the git repository will be mapped to <code>$pwd</code> (<code>dst: .</code>) in the local file system</p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: srl.nokia.sdcio.dev-23.10.1\nnamespace: default\nspec:\nrepoURL: https://github.com/nokia/srlinux-yang-models\nprovider: srl.nokia.sdcio.dev\nversion: 23.10.1\nkind: tag\nref: v23.10.1\ndirs:\n- src: srlinux-yang-models\ndst: .\nschema:\nmodels:\n- srl_nokia/models\nincludes:\n- ietf\n- openconfig/extensions\n- openconfig/openconfig-extensions.yang\nexcludes:\n- .*tools.*\n</code></pre> <p>To apply the CR, store the above content in a file (e.g: <code>srlinux_23.10.1_schema.yaml</code>) and run the command:</p> <pre><code>kubectl apply -f srlinux23.10.1_schema.yaml\n</code></pre> <p>After applying the previous CR to a kubernetes cluster, the <code>Schema</code> can be viewed with the commands:</p> <pre><code>kubectl get schemas.inv.sdcio.dev\n</code></pre> <pre><code>kubectl get schemas srl.nokia.sdcio.dev-23.10.1 -o yaml\n</code></pre> <p>Sample outputs:</p> <pre><code>$ kubectl get schemas.inv.sdcio.dev\nNAME                           READY   URL                                            REF             PROVIDER               VERSION\nsrl.nokia.sdcio.dev-23.10.1    True    https://github.com/nokia/srlinux-yang-models   v23.10.1        srl.nokia.sdcio.dev    23.10.1\n</code></pre> <pre><code>$ kubectl get schemas srl.nokia.sdcio.dev-23.10.1 -o yaml\napiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\n  annotations:\n    kubectl.kubernetes.io/last-applied-configuration: |\n{\"apiVersion\":\"inv.sdcio.dev/v1alpha1\",\"kind\":\"Schema\",\"metadata\":{\"annotations\":{},\"name\":\"srl.nokia.sdcio.dev-23.10.1\",\"namespace\":\"default\"},\"spec\":{\"dirs\":[{\"dst\":\".\",\"src\":\"srlinux-yang-models\"}],\"kind\":\"tag\",\"provider\":\"srl.nokia.sdcio.dev\",\"ref\":\"v23.10.1\",\"repoURL\":\"https://github.com/nokia/srlinux-yang-models\",\"schema\":{\"excludes\":[\".*tools.*\"],\"includes\":[\"ietf\",\"openconfig/extensions\",\"openconfig/openconfig-extensions.yang\"],\"models\":[\"srl_nokia/models\"]},\"version\":\"23.10.1\"}}\ncreationTimestamp: \"2024-01-09T23:05:13Z\"\nfinalizers:\n  - schema.inv.sdcio.dev/finalizer\n  generation: 1\nname: srl.nokia.sdcio.dev-23.10.1\n  namespace: default\n  resourceVersion: \"872\"\nuid: 8b533cc2-38fa-4487-965d-3877beb455fc\nspec:\n  dirs:\n  - dst: .\n    src: srlinux-yang-models\n  kind: tag\n  provider: srl.nokia.sdcio.dev\n  ref: v23.10.1\n  repoURL: https://github.com/nokia/srlinux-yang-models\n  schema:\n    excludes:\n    - .*tools.*\n    includes:\n    - ietf\n    - openconfig/extensions\n    - openconfig/openconfig-extensions.yang\n    models:\n    - srl_nokia/models\n  version: 23.10.1\nstatus:\n  conditions:\n  - lastTransitionTime: \"2024-01-09T23:05:16Z\"\nmessage: \"\"\nreason: Ready\n    status: \"True\"\ntype: Ready\n</code></pre>"},{"location":"user-guide/configuration/schemas/#sros-23102","title":"SROS 23.10.2","text":"<pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: sros.nokia.sdcio.dev-23.10.1\nnamespace: default\nspec:\nrepoURL: https://github.com/nokia/7x50_YangModels\nprovider: sros.nokia.sdcio.dev\nversion: 23.10.2\nkind: tag\nref: sros_23.10.r2\ndirs:\n- src: YANG\ndst: .\nschema:\nmodels:\n- nokia-combined\nincludes:\n- ietf\n- nokia-sros-yang-extensions.yang\nexcludes: []\n</code></pre>"},{"location":"user-guide/configuration/schemas/#juniper-mx-232r1","title":"Juniper MX 23.2R1","text":"<pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: mx.juniper.23.2r1\nnamespace: default\nspec:\nrepoURL: https://github.com/Juniper/yang\nprovider: mx.juniper.sdcio.dev\nversion: 23.2R1\nkind: branch\nref: master\ndirs:\n- src: 23.2/23.2R1/junos/conf\ndst: junos\n- src: 23.2/23.2R1/common\ndst: common\nschema:\nmodels:\n- junos\nincludes:\n- common\n</code></pre>"},{"location":"user-guide/configuration/schemas/#juniper-qfx-232r1","title":"Juniper QFX 23.2R1","text":"<pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: qfx.juniper.23.2r1\nnamespace: default\nspec:\nrepoURL: https://github.com/Juniper/yang\nprovider: qfx.juniper.sdcio.dev\nversion: 23.2R1\nkind: branch\nref: master\ndirs:\n- src: 23.2/23.2R1/junos-qfx/conf\ndst: junos\n- src: 23.2/23.2R1/common\ndst: common\nschema:\nmodels:\n- junos\nincludes:\n- common\n</code></pre>"},{"location":"user-guide/configuration/schemas/#juniper-ex-232r1","title":"Juniper EX 23.2R1","text":"<pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: ex.juniper.23.2r1\nnamespace: default\nspec:\nrepoURL: https://github.com/Juniper/yang\nprovider: ex.juniper.sdcio.dev\nversion: 23.2R1\nkind: branch\nref: master\ndirs:\n- src: 23.2/23.2R1/junos-ex/conf\ndst: junos\n- src: 23.2/23.2R1/common\ndst: common\nschema:\nmodels:\n- junos\nincludes:\n- common\n</code></pre>"},{"location":"user-guide/configuration/schemas/#juniper-nfx-232r1","title":"Juniper NFX 23.2R1","text":"<pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Schema\nmetadata:\nname: nfx.juniper.23.2r1\nnamespace: default\nspec:\nrepoURL: https://github.com/Juniper/yang\nprovider: nfx.juniper.sdcio.dev\nversion: 23.2R1\nkind: branch\nref: master\ndirs:\n- src: 23.2/23.2R1/junos-nfx/conf\ndst: junos\n- src: 23.2/23.2R1/common\ndst: common\nschema:\nmodels:\n- junos\nincludes:\n- common\n</code></pre>"},{"location":"user-guide/configuration/config/config/","title":"Config","text":"<p>Configs are partial or complete pieces of configuration that are intended to be deployed to the referenced target.</p>"},{"location":"user-guide/configuration/config/config/#example","title":"Example","text":"<pre><code>apiVersion: config.sdcio.dev/v1alpha1\nkind: Config\nmetadata:\nname: test\nnamespace: default\nlabels:\nconfig.sdcio.dev/targetName: dev1\nconfig.sdcio.dev/targetNamespace: default\nspec:\npriority: 10\nconfig:\n- path: /\nvalue:\ninterface:\n- name: \"system0\"\nadmin-state: \"enable\"\ndescription: \"k8s-system0-dummy\"\n</code></pre>"},{"location":"user-guide/configuration/config/config/#attributes","title":"Attributes","text":"<ul> <li><code>config</code>: Is a list of configuration pieces that consist of a <code>path</code> and a <code>value</code> attribute.<ul> <li><code>path</code>: The path describes where the configuration (<code>value</code>) part is rooted. This can either by <code>/</code> to indicate the configuration root level or any valid path within the schema.</li> <li><code>value</code>: The canfiguration in yaml format that is meant to go under the <code>path</code> in the target device.</li> </ul> </li> <li><code>priority</code>: The priority field is used as a tie-breaker, when multiple Config intents try to set overlapping  &lt;&lt;&lt; TODO &gt;&gt;&gt;</li> </ul>"},{"location":"user-guide/configuration/config/configset/","title":"ConfigSet","text":"<p>ConfigSets are partial or complete pieces of configuration that are intended to be deployed to a selected set of targets. Typically used to apply the same configuration to a set of targets using the targetSelector</p>"},{"location":"user-guide/configuration/config/configset/#example","title":"Example","text":"<pre><code>apiVersion: config.sdcio.dev/v1alpha1\nkind: ConfigSet\nmetadata:\nname: intent1\nnamespace: default\nspec:\ntarget:\ntargetSelector:\nmatchLabels:\nsdcio.dev/region: us-east\npriority: 10\nconfig:\n- path: /\nvalue:\ninterface:\n- name: ethernet-1/1\nadmin-state: \"enable\"\ndescription: \"intent1\"\nvlan-tagging: true\nsubinterface:\n- index: 2\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 2\n- index: 3\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 3\n- index: 4\ntype: bridged\nvlan:\nencap:\nsingle-tagged:\nvlan-id: 4\n</code></pre>"},{"location":"user-guide/configuration/config/configset/#attributes","title":"Attributes","text":"<ul> <li><code>target</code>: Is a list of configuration pieces that consist of a <code>targetSelector</code> attributes.<ul> <li><code>targetSelector</code>: The rules used to select the targets on which this config object gets applied to</li> </ul> </li> <li><code>config</code>: Is a list of configuration pieces that consist of a <code>path</code> and a <code>value</code> attribute.<ul> <li><code>path</code>: The path describes where the configuration (<code>value</code>) part is rooted. This can either by <code>/</code> to indicate the configuration root level or any valid path within the schema.</li> <li><code>value</code>: The canfiguration in yaml format that is meant to go under the <code>path</code> in the target device.</li> </ul> </li> <li><code>priority</code>: The priority field is used as a tie-breaker, when multiple Config intents try to set overlapping  &lt;&lt;&lt; TODO &gt;&gt;&gt;</li> </ul>"},{"location":"user-guide/configuration/discovery/addresses/","title":"Device discovery using Addresses (IPs or DNS names)","text":"<p>Address discovery uses the provided address in the <code>addresses</code> section of the <code>DiscoveryRule</code> CustomResource to identify the target device. With address discovery <code>sdc</code> allows to enable or disable full discovery (see Discovery Configuration Options).</p>"},{"location":"user-guide/configuration/discovery/addresses/#attributes","title":"Attributes","text":"<ul> <li><code>addresses</code><ul> <li><code>address</code>: The mgmt address of the Target.</li> <li><code>hostName</code>: The hostname of the target. if left empty the provided address will be used as the hostname.</li> </ul> </li> </ul>"},{"location":"user-guide/configuration/discovery/addresses/#examples","title":"Examples","text":"<p>Example of a <code>DiscoveryRule</code></p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dr-address\nnamespace: default\nspec:\nperiod: 1m\nconcurrentScans: 2\naddresses:\n- address: 172.18.0.4\nhostName: dev1\n- address: 172.18.0.3\nhostName: dev2\ndiscoveryProfile:\ncredentials: srl.nokia.sdcio.dev connectionProfiles:\n- gnmi-skipverify\ntargetConnectionProfiles:\n- credentials: srl.nokia.sdcio.dev connectionProfile: gnmi-skipverify\nsyncProfile: gnmi-onchange\ntargetTemplate:\nlabels:\nsdcio.dev/region: us-east\n</code></pre>"},{"location":"user-guide/configuration/discovery/introduction/","title":"Target Discovery guide","text":"<p>SDC offers robust and flexible mechanisms for discovering devices within a network. This capability is crucial for automating the configuration and management of network devices. SDC supports various discovery methods, including IPs or DNS names, IP prefixes, and service and POD discovery.</p> <p>A central aspect of this discovery process is the <code>DiscoveryRule</code> CustomResource, which not only configures discovery mechanisms but also generates a specific CustomResource called <code>Target</code> for each discovered device.</p>"},{"location":"user-guide/configuration/discovery/introduction/#overview-of-discovery-methods-in-sdc","title":"Overview of Discovery Methods in SDC","text":"<p>SDC offer 4 kinds of discovery:</p> <ul> <li>IP Prefix Based Discovery: Ideal for handling IP ranges and scenarios where the specific target IP address is unknown. This method allows <code>sdc</code> to intelligently explore and identify devices within specified IP prefixes.</li> <li>IP Address Based Discovery: Perfect for situations where the exact IP address of the target device is known. <code>sdc</code> enables precise discovery based on provided addresses (IP or DNS), ensuring accuracy in device identification.</li> <li>POD Based Discovery: Ideal when devices are instantiated as pods in a cluster. <code>sdc</code> enables device discovery based on the address of Kubernetes Pods. This advancement aligns with modern containerized environments, providing enhanced visibility into your network infrastructure.</li> <li>SVC Based Discovery: Ideal when devices are accessible through services in a pod. <code>sdc</code> discovers devices by utilizing the address of Kubernetes Services. This approach ensures comprehensive network mapping within dynamic Kubernetes services.</li> </ul>"},{"location":"user-guide/configuration/discovery/introduction/#discovery-configuration-options","title":"Discovery Configuration Options","text":"<p>In addition to the diverse discovery methods, <code>sdc</code> offers the flexibility to enable or disable discovery based on your specific requirements. However, it's important to note that for IP Prefix Based Discovery, disabling discovery is not supported, as this method is designed to continuously scan and adapt to changing IP ranges.</p> <p>Disabling discovery is enabled by supplying a <code>defaultSchema</code> in the CR definition.</p>"},{"location":"user-guide/configuration/discovery/introduction/#the-discoveryrule-customresource","title":"The DiscoveryRule CustomResource","text":"<p>The DiscoveryRule CustomResource is the cornerstone of the SDC discovery process. It not only initiates and manages the discovery of devices but also links these devices to their corresponding configurations and credentials. The key aspects of this CustomResource include:</p>"},{"location":"user-guide/configuration/discovery/introduction/#key-features","title":"Key Features","text":""},{"location":"user-guide/configuration/discovery/introduction/#device-and-profiles-association","title":"Device and Profiles association","text":"<p>Once a device is discovered, the DiscoveryRule links it with several essential components:</p> <ul> <li>Schema: Associates the device with its corresponding schema, enabling SDC to understand and manage the device's configuration correctly and validate changes made by users.</li> <li>Connection Profile: Connects the device to one or more pre-defined connection profile, which specifies how SDC should communicate with the device to modify and retrieve configuration.</li> <li>Sync Profile: Assigns a sync profile to the device, dictating how the device's configuration and state should be synchronized and managed.</li> <li>Credentials: Integrates with Kubernetes secrets to securely manage the credentials needed for accessing and configuring the device.</li> <li>Hostname: Either statically configured or retrieved from the device.</li> </ul>"},{"location":"user-guide/configuration/discovery/introduction/#creation-of-target-cr","title":"Creation of <code>Target</code> CR","text":"<p>For every device discovered, DiscoveryRule creates a <code>Target</code> CustomResource. This CR encapsulates details about the device, including its network address, associated schema, connection information, and synchronization settings.</p>"},{"location":"user-guide/configuration/discovery/introduction/#examples","title":"Examples","text":"<p>Example of a <code>DiscoveryRule</code></p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dr-static\nnamespace: default\nspec:\nperiod: 1m\nconcurrentScans: 2\ndefaultSchema:\nprovider: srl.nokia.sdcio.dev  version: 23.10.1\naddresses:\n- address: 172.18.0.4\nhostName: dev1\n- address: 172.18.0.3\nhostName: dev2\ntargetConnectionProfiles:\n- credentials: srl.nokia.sdcio.dev connectionProfile: gnmi-skipverify\nsyncProfile: gnmi-onchange\ntargetTemplate:\nlabels:\nsdcio.dev/region: us-east\n</code></pre> <p>This documentation page highlights the versatility and sophistication of SDC's device discovery capabilities. By leveraging DiscoveryRule, users can efficiently integrate a wide range of devices into their network management workflows, paving the way for a more automated and streamlined network configuration process.</p>"},{"location":"user-guide/configuration/discovery/pod/","title":"Device discovery using k8s PODs","text":"<p>Pod discovery uses the provided <code>podSelector</code> section of the <code>DiscoveryRule</code> CustomResource to identify the target device(s). With pod discovery <code>sdc</code> allows to enable or disable full discovery (see Discovery Configuration Options). POD discovery checks if the <code>Pod</code> is ready and uses the first IP adddress in the POD status to identify the <code>target</code>.</p>"},{"location":"user-guide/configuration/discovery/pod/#attributes","title":"Attributes","text":"<ul> <li><code>podSelector</code>:<ul> <li><code>matchLabels</code>: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed. (uses kubernetes logic)</li> <li><code>matchExpressions</code>: matchExpressions is a list of label selector requirements. The requirements are ANDed. (uses kubernetes logic)</li> </ul> </li> </ul>"},{"location":"user-guide/configuration/discovery/pod/#examples","title":"Examples","text":"<p>Example of a <code>DiscoveryRule</code></p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dr-dynamic\nnamespace: default\nspec:\nperiod: 1m\nconcurrentScans: 2\npodSelector:\nmatchLabels:\nsdcio.dev/nodeType: srl.nokia.sdcio.dev\ndiscoveryProfile:\ncredentials: srl.nokia.sdcio.dev connectionProfiles:\n- gnmi-skipverify\ntargetConnectionProfiles:\n- credentials: srl.nokia.sdcio.dev connectionProfile: gnmi-skipverify\nsyncProfile: gnmi-onchange\ntargetTemplate:\nlabels:\nsdcio.dev/region: us-east\n</code></pre>"},{"location":"user-guide/configuration/discovery/prefixes/","title":"Device discovery using IP prefixes","text":"<p>IP Prefix discovery uses the provided prefix in the <code>prefixes</code> section of the <code>DiscoveryRule</code> CustomResource to identify the target device. With prefix discovery <code>sdc</code> full discovery cannot be disabled (see Discovery Configuration Options).</p>"},{"location":"user-guide/configuration/discovery/prefixes/#attributes","title":"Attributes","text":"<ul> <li><code>prefixes</code>:<ul> <li><code>prefix</code>: The ip prefix used for discovery.</li> <li><code>excludes</code>: The IP addresses or prefixes to exclude during discovery</li> </ul> </li> </ul>"},{"location":"user-guide/configuration/discovery/prefixes/#examples","title":"Examples","text":"<p>Example of a <code>DiscoveryRule</code></p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dr-dynamic\nnamespace: default\nspec:\nperiod: 1m\nconcurrentScans: 2\nprefixes:\n- prefix: 172.18.0.0/24\nexcludes:\n- 172.18.0.0\n- 172.18.0.1\n- 172.18.0.255\ndiscoveryProfile:\ncredentials: srl.nokia.sdcio.dev connectionProfiles:\n- gnmi-skipverify\ntargetConnectionProfiles:\n- credentials: srl.nokia.sdcio.dev connectionProfile: gnmi-skipverify\nsyncProfile: gnmi-onchange\ntargetTemplate:\nlabels:\nsdcio.dev/region: us-east\n</code></pre>"},{"location":"user-guide/configuration/discovery/service/","title":"Device discovery using k8s services","text":"<p>Service discovery uses the provided <code>serviceSelector</code> section of the <code>DiscoveryRule</code> CustomResource to identify the target device(s). With service discovery <code>sdc</code> allows to enable or disable full discovery (see Discovery Configuration Options). Service discovery uses the kubernetes <code>Service</code> to identify the target using the cluster domain name following the kubernetes logic.</p>"},{"location":"user-guide/configuration/discovery/service/#attributes","title":"Attributes","text":"<ul> <li><code>serviceSelector</code>:<ul> <li><code>matchLabels</code>: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed. (uses kubernetes logic)</li> <li><code>matchExpressions</code>: matchExpressions is a list of label selector requirements. The requirements are ANDed. (uses kubernetes logic)</li> </ul> </li> <li><code>serviceDomain</code>: identifies the local service domain that is used in the cluster. Defaults to <code>cluster.local</code> but can be changed based on the cluster setup</li> </ul>"},{"location":"user-guide/configuration/discovery/service/#examples","title":"Examples","text":"<p>Example of a <code>DiscoveryRule</code></p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: DiscoveryRule\nmetadata:\nname: dr-dynamic\nnamespace: default\nspec:\nperiod: 1m\nconcurrentScans: 2\nserviceSelector:\nmatchLabels:\nsdcio.dev/nodeType: srl.nokia.sdcio.dev\ndiscoveryProfile:\ncredentials: srl.nokia.sdcio.dev connectionProfiles:\n- gnmi-skipverify\ntargetConnectionProfiles:\n- credentials: srl.nokia.sdcio.dev connectionProfile: gnmi-skipverify\nsyncProfile: gnmi-onchange\ntargetTemplate:\nlabels:\nsdcio.dev/region: us-east\n</code></pre>"},{"location":"user-guide/configuration/target/target/","title":"Target","text":"<p>The Target CR is what defines a system thats managed by SDC. The Target CRs are however not explicitly created by an enduser. The creation of Targets is the job of the DiscoveryRule Controller. It will take the defined DiscoveryRules perform discovery and create the target CRs with all the information configured or discovered by the Discovery Controller.</p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: Target\nmetadata:\nname: dev-man\nnamespace: default\nspec:\naddress: 172.18.0.5:57400\nconnectionProfile: gnmi-skipverify\ncredentials: srl.nokia.sdcio.dev\nprovider: srl.nokia.sdcio.dev\nsyncProfile: gnmi-onchange\n</code></pre>"},{"location":"user-guide/configuration/target/target/#attributes","title":"Attributes","text":"<ul> <li><code>address</code>: The mgmt address of the Target.</li> <li><code>connectionProfile</code>: The name of the connection profile (targetconnectionprofiles.inv.sdcio.dev) used to connect to the Target.</li> <li><code>syncProfile</code>: The name of the connection profile (targetsyncprofiles.inv.sdcio.dev) used to sync  config from the Target into SDC.</li> <li><code>credentials</code>: The name of the secret that contains the login creadentials for the Target.</li> <li><code>provider</code>: A string that defines the connection provider that is to be used. The format is \"<code>&lt;MODEL/NOS&gt;.&lt;VENDOR&gt;.sdcio.dev</code>\"</li> </ul>"},{"location":"user-guide/configuration/target-profiles/connection-profile/","title":"Connection Profile","text":"<p>SDC offers versatile connection capabilities with devices, supporting multiple protocols like NETCONF and gNMI. It is designed to accommodate a range of devices and security needs. The connection details are comprehensively outlined in the <code>TargetConnectionProfile</code> CustomResource. For further information, please refer to here.</p>"},{"location":"user-guide/configuration/target-profiles/connection-profile/#understanding-supported-protocols-in-sdc","title":"Understanding Supported Protocols in SDC","text":"<p>SDC seamlessly integrates two key protocols - NETCONF and gNMI - for device communication. Configuring connection profiles in SDC involves both general attributes and protocol-specific ones.</p>"},{"location":"user-guide/configuration/target-profiles/connection-profile/#general-connection-attributes","title":"General Connection Attributes","text":"<ul> <li><code>protocol</code>: Determines the connection protocol, with options being <code>netconf</code> or <code>gnmi</code>.</li> <li><code>connectRetry</code>: The interval between retries after a connection failure, defaulting to 10 seconds.</li> <li><code>timeout</code>: The duration for attempting initial connection establishment, set by default to 10 seconds.</li> </ul>"},{"location":"user-guide/configuration/target-profiles/connection-profile/#protocol-specific-attributes","title":"Protocol-Specific Attributes","text":""},{"location":"user-guide/configuration/target-profiles/connection-profile/#netconf-connection-attributes","title":"NETCONF Connection Attributes","text":"<p>For connections via NETCONF, the <code>protocol</code> needs to be set to <code>netconf</code>. Specific attributes include:</p> <ul> <li><code>port</code>: The designated SSH port for NETCONF sessions, usually <code>830</code>.</li> <li><code>includeNS</code>: When enabled, XML tags incorporate their namespace as an attribute.</li> <li><code>operationWithNS</code>: Activates proper namespacing for the <code>edit-config</code> RPC operation attribute in NETCONF.</li> <li><code>useOperationRemove</code>: If set to true, SDC utilizes the NETCONF operation <code>remove</code> rather than <code>delete</code>.</li> <li><code>preferredNetconfVersion</code>: Selects between NETCONF versions <code>1.0</code> or <code>1.1</code>.</li> <li><code>commitCandidate</code>: Selects the datastore on the target for applying the config to. Defaults to <code>candidate</code>, but can be set to <code>running</code> if the target does not support a <code>candidate</code> datastore.</li> </ul> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetConnectionProfile\nmetadata:\nname: netconf\nnamespace: default\nlabels:\ndummy: dummy\nspec:\nport: 830\nprotocol: netconf\nskipVerify: true\nincludeNS: true\noperationWithNS: true\n</code></pre>"},{"location":"user-guide/configuration/target-profiles/connection-profile/#gnmi-connection-attributes","title":"gNMI Connection Attributes","text":"<p>For gNMI protocol connections, set protocol to gnmi. Key attributes for gNMI are:</p> <ul> <li><code>port</code>: The default TCP port for gNMI sessions is <code>57400</code>.</li> <li><code>encoding</code>: Specifies the encoding format for gNMI (<code>JSON</code>, <code>JSON_IETF</code>, <code>BYTES</code>, <code>ASCII</code>, <code>PROTO</code>, or an integer).</li> <li><code>skipVerify</code>: If enabled, SDC secures the connection without validating device certificates.</li> <li><code>insecure</code>: Establishes an insecure gNMI connection when set to true.</li> </ul> <p>Example gNMI Configuration with Skip-Verify:</p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetConnectionProfile\nmetadata:\nname: gnmi-skipverify\nnamespace: default\nspec:\nport: 57400\nprotocol: gnmi\nencoding: ASCII\nskipVerify: true\ninsecure: false\n</code></pre>"},{"location":"user-guide/configuration/target-profiles/sync-profile/","title":"Sync Profile","text":"<p>The Sync Profile is an integral component of SDC, enabling the accurate configuration of devices and validation of configuration payloads.  SDC achieves this by synchronizing the device's running store and state store into an internal cache. The synchronization process, including the protocol and strategy used, is customizable through the <code>TargetSyncProfile</code> CustomResource, detailed here.</p>"},{"location":"user-guide/configuration/target-profiles/sync-profile/#synchronization-protocols","title":"Synchronization protocols","text":"<p>SDC supports the synchronization of a device's configuration and state using two protocols: gNMI and NETCONF. The <code>TargetSyncProfile</code> encompasses both protocol-specific and general fields.</p>"},{"location":"user-guide/configuration/target-profiles/sync-profile/#general-sync-attributes","title":"General sync Attributes","text":"<p>These attributes are common across synchronization protocols:</p> <ul> <li><code>validate</code>: If set to true, SDC validates the received updates against the device's schema.</li> <li><code>workers</code>: Determines the number of cache workers, optimizing write performance to the cache.</li> <li><code>buffer</code>: Specifies the buffer size for queuing sync updates before writing to the cache.</li> <li><code>sync</code>: A list of synchronization strategies, each defining a protocol and its specific attributes. Multiple strategies can be employed concurrently.</li> </ul>"},{"location":"user-guide/configuration/target-profiles/sync-profile/#netconf-sync-strategy","title":"NETCONF Sync strategy","text":"<p>For NETCONF synchronization, the netconf strategy is used with protocol: netconf. SDC periodically retrieves the current running configuration of the device using the NETCONF get-config RPC. This can be adjusted with the following attributes:</p> <ul> <li><code>paths</code>: A list of paths included as <code>filter</code> in the <code>get-config</code> RPC.</li> <li><code>interval</code>: The frequency at which <code>get-config</code> is executed.</li> </ul> <p>Example NETCONF Sync Profile:</p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetSyncProfile\nmetadata:\nname: netconf-getconfig\nnamespace: default\nspec:\nbuffer: 0\nworkers: 10\nvalidate: true\nsync:\n- name: config\nprotocol: netconf\npaths:\n- /\nmode: sample\nencoding: config\ninterval: 10s\n</code></pre>"},{"location":"user-guide/configuration/target-profiles/sync-profile/#gnmi-sync-strategy","title":"gNMI Sync strategy","text":"<p>For gNMI synchronization, set the protocol to <code>protocol: gnmi</code>:</p> <p>SDC supports various gNMI subscription modes:</p> <ul> <li><code>onChange</code>: Corresponds to gNMI stream mode ON_CHANGE.</li> <li><code>sample</code>: Matches gNMI stream mode SAMPLE, using interval as the sample-interval.</li> <li><code>once</code>: Equivalent to gNMI mode ONCE, where a SubscribeRequest is sent at each interval.</li> </ul> <p>Other gNMI specific attributes:</p> <ul> <li><code>encoding</code>: The gNMI encoding used for subscriptions.</li> </ul> <p>Example of an <code>onChange</code> gNMI SyncProfile:</p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetSyncProfile\nmetadata:\nname: gnmi-onchange\nnamespace: default\nspec:\nbuffer: 0\nworkers: 10\nvalidate: true\nsync:\n- name: config\nprotocol: gnmi\npaths:\n- /\nmode: onChange\nencoding: config     # SRLinux specific encoding (id: 45)\n</code></pre> <p>Example of a gNMI <code>TargetSyncProfile</code> with both <code>once</code> and <code>onChange</code> modes:</p> <pre><code>apiVersion: inv.sdcio.dev/v1alpha1\nkind: TargetSyncProfile\nmetadata:\nname: gnmi-onchange-and-once\nnamespace: default\nspec:\nbuffer: 0\nworkers: 10\nvalidate: true\nsync:\n- name: config\nprotocol: gnmi\npaths:\n- /\nmode: onChange\nencoding: config\n- name: all_once\nprotocol: gnmi\npaths:\n- /\nmode: once\nencoding: ASCII\ninterval: 5m\n</code></pre>"}]}